{"componentChunkName":"component---src-templates-post-js","path":"/leaflet-layer-plugin-first-steps/","result":{"data":{"markdownRemark":{"html":"<p>In diesem Beitrag erkläre ich Ihnen, wie Sie ein Plugin für <a href=\"http://leafletjs.com/\">LeafletJs</a> erstellen. Ganz genau zeige ich Ihnen, wie Sie ein Layer-Plugin programmieren. Ein Layer-Plugin ermöglicht es Ihnen, Daten auf der Leaflet-Karte anzuzeigen.</p>\n<p>Sie können zum Beispiel</p>\n<ul>\n<li>Marker,</li>\n<li>geometrische Formen,</li>\n<li>Symbole oder ganz einfach</li>\n<li>Text</li>\n</ul>\n<p>auf der Leaflet-Karte mithilfe von Koordinaten platzieren.</p>\n<p>In diesem Text konzentriere ich mich darauf, die Struktur und den Lebenszyklus von Leaflet-Plugins zu erklären. Meine Vorlage für die Erstellung von Leaflet Control- und Layer-Plugins habe ich auf <a href=\"https://github.com/astridx/leafletjs-plugin-boilerplate\">Github</a> veröffentlicht.</p>\n<h3>Leaflet Layer-Plugins</h3>\n<p>Während <a href=\"/leaflet-control-plugin-first-steps\">Control-Plugin</a>s Leaflet um neue Funktionen erweitern, ermöglichen es Layer-Plugins, neue Arten von Inhalten auf der Karte anzuzeigen. Beispielsweise gibt es Layer-Plugins, um</p>\n<ul>\n<li><a href=\"https://github.com/Leaflet/Leaflet.markercluster\">Marker zu gruppieren</a>,</li>\n<li><a href=\"https://github.com/Leaflet/Leaflet.draw\">Polygone zu zeichnen</a> und</li>\n<li><a href=\"https://github.com/Leaflet/Leaflet.heat\">Daten zu visualisieren</a>.</li>\n</ul>\n<h3>So erstellen Sie ein Leaflet-Layer-Plugin</h3>\n<p>Bevor ich mit Ihnen praktisch einen Layer erstelle, hier die recht langweilig klingende Definition: Layer-Plugins sind JavaScript-Klassen, die die <a href=\"http://leafletjs.com/reference.html#class\">Leaflet Klasse</a> <a href=\"https://leafletjs.com/reference-1.3.4.html#layer\"><code class=\"language-text\">L.Layer</code></a> erweitern. Üblicherweise wird der Name des Layer-Plugins zum Namensraum von Leaflet, also zu <code class=\"language-text\">L</code>, hinzugefügt.</p>\n<p>Im nächsten Beispiel zeige ich Ihnen, wie Sie ein Layer-Plugin mit dem Namen <code class=\"language-text\">L.LeafletLayerExample</code> erstellen. Hier zunächst der JavaScript-Code.</p>\n<pre class=\"grvsc-container solarized-light\" data-language=\"javascript\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk7\">L</span><span class=\"mtk1\">.</span><span class=\"mtk7\">LeafletLayerExample</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">L</span><span class=\"mtk1\">.</span><span class=\"mtk7\">Layer</span><span class=\"mtk1\">.</span><span class=\"mtk7\">extend</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk8\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    )}</span></span></span></code></pre>\n<p>Das Standardmuster für die Erstellung eines Leaflet-Plugins, implementiert eine <a href=\"https://de.wikipedia.org/wiki/Fabrikmethode\">Factory-Methode</a>, mit der die Erstellung des Plugins mit anderen Methodenaufrufen verkettet werden kann. Das ist ganz praktisch. Deshalb sollte jedes Leaflet-Plugin diese Factory-Methode enthalten. Schreiben Sie dazu ganz ans Ende der Datei den folgenden Text.</p>\n<pre class=\"grvsc-container solarized-light\" data-language=\"javascript\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">L</span><span class=\"mtk1\">.</span><span class=\"mtk7\">leafletLayerExample</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk13 mtkb\">function</span><span class=\"mtk1\"> (options) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk8\">return</span><span class=\"mtk1\"> </span><span class=\"mtk8\">new</span><span class=\"mtk1\"> </span><span class=\"mtk7\">L</span><span class=\"mtk1\">.</span><span class=\"mtk7\">LeafletLayerExample</span><span class=\"mtk1\">(</span><span class=\"mtk7\">options</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>Nun können sie Ihr Plugin ganz einfach in einer Zeile erstellen und zur Karte hinzufügen – wenn es fertig ist. Im Beispiel würde das wie folgt aussehen:</p>\n<pre class=\"grvsc-container solarized-light\" data-language=\"javascript\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">L</span><span class=\"mtk1\">.</span><span class=\"mtk7\">leafletLayerExample</span><span class=\"mtk1\">().</span><span class=\"mtk7\">addTo</span><span class=\"mtk1\">(</span><span class=\"mtk7\">map</span><span class=\"mtk1\">)</span></span></span></code></pre>\n<p>Auch hier gilt: Üblicherweise wird die Factory-Methode nach der Klasse des Steuerelement-Plugins benannt. Nur der erste Buchstaben wird mit einem kleinen Buchstaben geschrieben, anstelle eines großen.</p>\n<h3>Der Lebenszyklus des Leaflet Layer-Plugins</h3>\n<p>Leaflet ruft die folgenden Methoden eines Layer-Plugins auf, wenn der Layer zu einer Leaflet-Karte hinzugefügt wird.</p>\n<ul>\n<li><code class=\"language-text\">initialize()</code></li>\n<li><code class=\"language-text\">onAdd()</code></li>\n</ul>\n<p>Leaflet ruft die <code class=\"language-text\">initialize</code>-Methode auf, wenn eine neue Instanz eines Layer-Plugins erstellt wird, indem <code class=\"language-text\">new</code> direkt aufgerufen wird oder wenn die Factory-Methode verwendet wird:</p>\n<ul>\n<li><code class=\"language-text\">L.leafletLayerExample()</code></li>\n<li><code class=\"language-text\">new L.LeafletLayerExample()</code></li>\n</ul>\n<p>Ein übliches Layer-Plugin-Muster besteht darin, die Koordinaten des Layers als Schlüssel-Wert-Paar des Optionsparameters zu übergeben. Der Optionsparameter wird dazu an die Initialisierungsmethode übergeben. Durch das Festlegen der Position der Ebene kann das Plugin die Ebene korrekt aktualisieren, wenn die Karte vergrößert, verkleinert oder verschoben wird.</p>\n<pre class=\"grvsc-container solarized-light\" data-language=\"javascript\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    initialize: </span><span class=\"mtk13 mtkb\">function</span><span class=\"mtk1\">(options) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_latLng</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">options</span><span class=\"mtk1\">.</span><span class=\"mtk7\">latLng</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3 mtki\">// Initialisierung des Layer-Plugins.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span></code></pre>\n<p>Nach dem Setzen des Wertes für <code class=\"language-text\">this._latLng</code> kann der <code class=\"language-text\">initialize</code>-Methode weiterer Code zur Initialisierung des Layers hinzugefügt werden.</p>\n<p>Leaflet ruft die <code class=\"language-text\">onAdd</code>-Methode auf, wenn der Layer mit den folgenden Methodenaufrufen zur Karte hinzugefügt wird:</p>\n<ul>\n<li><code class=\"language-text\">layer.addTo(Karte);</code></li>\n<li><code class=\"language-text\">map.addLayer(Layer);</code></li>\n</ul>\n<p>Bisher war das Erstellen eines Leaflet-Ebenen-Plugins dem Erstellen eines Control-Plugins sehr ähnlich. Der Hauptunterschied zwischen Layer- und Steuerelement-Plugins liegt in der Menge der Arbeit, die die <code class=\"language-text\">onAdd</code>-Methode ausführen muss. Idealerweise erstellt man hier zunächst einen Verweis auf die Karte (<code class=\"language-text\">this._map = map;</code>), um später bei der Verarbeitung von Ereignissen leicht auf diese zugreifen zu können.</p>\n<pre class=\"grvsc-container solarized-light\" data-language=\"javascript\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    onAdd: </span><span class=\"mtk13 mtkb\">function</span><span class=\"mtk1\">(map) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_map</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">map</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk13 mtkb\">var</span><span class=\"mtk1\"> </span><span class=\"mtk7\">layerElementTag</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39;div&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk13 mtkb\">var</span><span class=\"mtk1\"> </span><span class=\"mtk7\">layerElementClasses</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk11\">&#39; leaflet-layer-example leaflet-zoom-hide&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_layerElement</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">L</span><span class=\"mtk1\">.</span><span class=\"mtk7\">DomUtil</span><span class=\"mtk1\">.</span><span class=\"mtk7\">create</span><span class=\"mtk1\">(</span><span class=\"mtk7\">layerElementTag</span><span class=\"mtk1\">, </span><span class=\"mtk7\">layerElementClasses</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk3 mtki\">// Continue implementing the layer here.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">map</span><span class=\"mtk1\">.</span><span class=\"mtk7\">getPanes</span><span class=\"mtk1\">().</span><span class=\"mtk7\">overlayPane</span><span class=\"mtk1\">.</span><span class=\"mtk7\">appendChild</span><span class=\"mtk1\">(</span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_layerElement</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">map</span><span class=\"mtk1\">.</span><span class=\"mtk7\">on</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&#39;viewreset&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_updatePosition</span><span class=\"mtk1\">, </span><span class=\"mtk7\">this</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_updatePosition</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span></code></pre>\n<p>Nachdem der Verweise auf die Karte fertig ist, erstellt die <code class=\"language-text\">onAdd</code>-Methode das DOM-Element, das zur Anzeige der Ebenen-Inhalte genutzt werden soll. (<code class=\"language-text\">var layerElementTag = &#39;div&#39;;</code>).</p>\n<p>Es ist wichtig, die CSS-Klasse <code class=\"language-text\">leaflet-zoom-hide</code> zum Element hinzuzufügen (<code class=\"language-text\">var layerElementClasses = &#39;.my-leaflet-layer leaflet-zoom-hide&#39;;</code>). Elemente der Klasse <code class=\"language-text\">leaflet-zoom-hide</code> werden in Leaflet ausgeblendet, während die Karte vergrößert oder verkleinert wird. Dies bringt Performance-Vorteile.</p>\n<p>Im Gegensatz zu einem Control-Plugin, das mit dem Aufruf von <code class=\"language-text\">map.addControl(Steuerelement)</code> automatisch zur Leaflet-Karte hinzugefügt wird, muss sich ein Layer-Plugin selbst um die Anzeige kümmern (<code class=\"language-text\">map.getPanes().overlayPane.appendChild(this._layerElement);</code>).</p>\n<p>Nachdem Sie es zu einer Leaflet-Karte hinzugefügt haben, muss ein Layer-Plugin das <code class=\"language-text\">viewreset</code>-Ereignis der Leaflet-Karte verfolgen (<code class=\"language-text\">map.on(&#39;viewreset&#39;, this._updatePosition, this);</code>). Leaflet löst ein <code class=\"language-text\">viewreset</code>-Ereignis aus, wenn der Benutzer die Karte vergrößert oder verkleinert. Die Methode <code class=\"language-text\">_updatePosition</code> ist dafür verantwortlich, den Layer neu zu positionieren, wenn die Karte vergrößert oder verkleinert wird.</p>\n<p>Da die Methode <code class=\"language-text\">_updatePosition</code> die Berechnung zum korrekten Positionieren des Layers auf der Karte durchführt, führen wir sie am Ende der <code class=\"language-text\">onAdd()</code>-Methode aus, um dem Layer die korrekte Ausgangsposition zu geben (<code class=\"language-text\">this._updatePosition();</code>).</p>\n<p>Wenn die Karte vergrößert oder verkleinert wird, haben die Breiten- und Längengrade der Ebene (festgelegt, als die Ebene erstellt wurde) unterschiedliche Koordinaten auf dem Bildschirm. Um die Ebene nach einem Zoom neu zu positionieren, berechnet die Methode <code class=\"language-text\">_updatePosition</code> zunächst die Bildschirmkoordinaten der Ebene mit der Methode <code class=\"language-text\">latLngToLayerPoint</code><br>\n(<code class=\"language-text\">var position = this._map.latLngToLayerPoint(this._latLng);</code>) neu. Als Nächstes werden die Bildschirmkoordinaten des DOM-Elements der Ebene mit den neuen Bildschirmkoordinaten (<code class=\"language-text\">L.DomUtil.setPosition(this._layerElement, position);</code>) aktualisiert.</p>\n<pre class=\"grvsc-container solarized-light\" data-language=\"javascript\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    _updatePosition: </span><span class=\"mtk13 mtkb\">function</span><span class=\"mtk1\">() {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk13 mtkb\">var</span><span class=\"mtk1\"> </span><span class=\"mtk7\">position</span><span class=\"mtk1\"> </span><span class=\"mtk8\">=</span><span class=\"mtk1\"> </span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_map</span><span class=\"mtk1\">.</span><span class=\"mtk7\">latLngToLayerPoint</span><span class=\"mtk1\">(</span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_latLng</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">L</span><span class=\"mtk1\">.</span><span class=\"mtk7\">DomUtil</span><span class=\"mtk1\">.</span><span class=\"mtk7\">setPosition</span><span class=\"mtk1\">(</span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_layerElement</span><span class=\"mtk1\">, </span><span class=\"mtk7\">position</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span></code></pre>\n<p>Leaflet ruft eine dritte Layer-Plugin-Methode auf. Diese Methode heißt <code class=\"language-text\">onRemove</code>. Die Methode <code class=\"language-text\">onRemove</code> wird - wie der Name schon sagt - aufgerufen, wenn der Layer aus der Karte entfernt wird.</p>\n<ol>\n<li><code class=\"language-text\">layer.removeFrom</code>(Karte);`</li>\n<li><code class=\"language-text\">map.removeLayer(Layer);</code></li>\n</ol>\n<p>Genau wie die <code class=\"language-text\">onRemove</code>-Methode eines Leaflet-Control-Plugins ist die <code class=\"language-text\">onRemove</code>-Methode eines Layer-Plugins der Ort, an dem aufgeräumt wird. Entfernen Sie hier die DOM-Elemente und Ereignis-Listener. Darüber hinaus sollte sich die Ebene aus dem Overlay-Fensterbereich der Leaflet Karte<br>\nentfernen (<code class=\"language-text\">map.getPanes().overlayPane.removeChild(this._layerElement);</code>) und sie sollte die Überwachung von <code class=\"language-text\">viewreset</code>-Ereignissen (<code class=\"language-text\">map.off(&#39;viewreset&#39;, this._updatePosition, this);</code>) beenden.</p>\n<pre class=\"grvsc-container solarized-light\" data-language=\"javascript\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    onRemove: </span><span class=\"mtk13 mtkb\">function</span><span class=\"mtk1\">(map) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">map</span><span class=\"mtk1\">.</span><span class=\"mtk7\">getPanes</span><span class=\"mtk1\">().</span><span class=\"mtk7\">overlayPane</span><span class=\"mtk1\">.</span><span class=\"mtk7\">removeChild</span><span class=\"mtk1\">(</span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_layerElement</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk7\">map</span><span class=\"mtk1\">.</span><span class=\"mtk7\">off</span><span class=\"mtk1\">(</span><span class=\"mtk11\">&#39;viewreset&#39;</span><span class=\"mtk1\">, </span><span class=\"mtk7\">this</span><span class=\"mtk1\">.</span><span class=\"mtk7\">_updatePosition</span><span class=\"mtk1\">, </span><span class=\"mtk7\">this</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span></code></pre>\n<h3>Styling</h3>\n<p>Leaflet Layer können Sie wie jedes andere DOM-Element mit CSS gestalten. Hier füge ich der CSS-Klasse <code class=\"language-text\">leaflet-layer-example</code> Stilregeln hinzu. Naja, bisher füge ich nur drei Punkte hinzu. Sie haben sicher etwas mehr Fantasie. Zur Erinnerung: Das <code class=\"language-text\">div</code>-Element mit der Klasse <code class=\"language-text\">leaflet-layer-example</code> haben wir in der <code class=\"language-text\">onAdd</code>-Methode hinzugefügt.</p>\n<pre class=\"grvsc-container solarized-light\" data-language=\"javascript\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    .</span><span class=\"mtk7\">leaflet</span><span class=\"mtk8\">-</span><span class=\"mtk7\">layer</span><span class=\"mtk8\">-</span><span class=\"mtk7\">example</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      </span><span class=\"mtk8\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk8\">...</span></span></span></code></pre>\n<h3>Lesen Sie weiter</h3>\n<p>Die Leaflet-Dokumentation enthält einen <a href=\"https://leafletjs.com/2013/06/28/leaflet-plugin-authoring-guide.html\">Plugin-Authoring-Leitfaden</a>, in dem bewährte Vorgehensweisen zum</p>\n<ul>\n<li>Organisieren,</li>\n<li>Präsentieren und</li>\n<li>Demonstrieren</li>\n</ul>\n<p>von Leaflet-Plugin-Code erläutert werden.</p>\n<p>Auf der <a href=\"https://leafletjs.com/plugins.html\">Leaflet Website</a> werden verschiedene Plugins aufgelistet, die von der Leaflet-Community erstellt wurden. Die meisten Plugins sind <a href=\"https://de.wikipedia.org/wiki/Open_Source\">Open Source</a> und sind auf <a href=\"https://github.com/\">GitHub</a> verfügbar. Wer gerne mit Beispielen lernt, findet hier eine Fülle von Möglichkeiten, um das Erstellen eigenes Plugins zu lernen.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .solarized-light { background-color: #FDF6E3; }\n  .solarized-light .mtki { font-style: italic; }\n  .solarized-light .mtkb { font-weight: bold; }\n  .solarized-light .mtk1 { color: #657B83; }\n  .solarized-light .mtk7 { color: #268BD2; }\n  .solarized-light .mtk8 { color: #859900; }\n  .solarized-light .mtk13 { color: #073642; }\n  .solarized-light .mtk3 { color: #93A1A1; }\n  .solarized-light .mtk11 { color: #2AA198; }\n  .solarized-light .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n</style>","fileAbsolutePath":"/home/astrid/git/websites/meinblog/content/posts/leaflet/2018-12-11-leaflet-layer-plugin-first-steps.md","excerpt":"In diesem Beitrag erkläre ich Ihnen, wie Sie ein Plugin für LeafletJs erstellen. Ganz genau zeige ich Ihnen, wie Sie ein Layer-Plugin…","fields":{"slug":"/leaflet-layer-plugin-first-steps/"},"frontmatter":{"title":"Erstellen Sie Ihr erstes Leaflet-Layer-Plugin - Ein Tutorial für Anfänger","date":"11.12.2018","tags":["geografische Daten","Leaflet"],"thumbnail":null}}},"pageContext":{"slug":"/leaflet-layer-plugin-first-steps/","previous":{"id":"07182bae-bac0-5206-bb1a-197a5ec2fbb4","frontmatter":{"title":"Erstellen Sie Ihr erstes Leaflet-Control-Plugin - Ein Tutorial für Anfänger","tags":["geografische Daten","Leaflet"],"template":"post"},"fields":{"slug":"/leaflet-control-plugin-first-steps/"}},"next":{"id":"d1e5e19f-887b-5f6e-a59a-e7f26e27b8e2","frontmatter":{"title":"Willkommen","tags":["geografische Daten","Leaflet"],"template":"post"},"fields":{"slug":"/willkommen-leaflet/"}}}},"staticQueryHashes":[]}