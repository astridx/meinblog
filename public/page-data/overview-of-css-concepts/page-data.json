{"componentChunkName":"component---src-templates-post-js","path":"/overview-of-css-concepts/","result":{"data":{"markdownRemark":{"id":"ebf5b1a3-9cb6-5db3-8e52-1a46c7f172a4","html":"<p>Das Anwenden von CSS ist wie das Sprechen einer gesprochenen Sprache - es gibt viele Wörter, von denen Du nur eine kleine Teilmenge täglich verwendst. Und: Genau wie das Lesen eines Wörterbuchs kein effizienter Weg ist, um eine Sprache zu lernen, ist das Betrachten einer <a href=\"https://www.w3.org/Style/CSS/all-properties.en.html\">Liste von Eigenschaften</a> nicht hilfreich, um CSS zu verstehen.</p>\n<p>Manche Leute denken, CSS sei schwierig und es ist zu mühsam, es zu lernen. Andere wiederum meinen, dass es keine Programmiersprache ist und es so unkompliziert ist, sie es erst gar nicht lernen brauchen. Letztendlich hat CSS eine Menge zu bieten. Wenn du ein paar Schlüsselbegriffe kennst, fühlst du dich sicher. Du betrachtest ein Design und überlegst, wie du es in die Realität umsetzt.</p>\n<p>Hier im Artikel sehe ich Teilbereiche von CSS an, die meiner Meinung nach wichtig sind. Ich werde Tipps und Tricks geben, die ich im Laufe der Jahre gelernt habe.</p>\n<blockquote>\n<p>Wenn Sie nur ein paar Tipps wünschen, wie Sie Ihr Design ansprechend oder konsistent gestalten, lesen Sie <a href=\"\">todo</a>. Ich denke, dass <a href=\"https://wiki.selfhtml.org/wiki/CSS\">selfhtml.org</a> eine gelungene Einführung in die Konzepte des Webdesigns für Anfänger bietet.</p>\n</blockquote>\n<h4 id=\"who-is-this-article-for\" style=\"position:relative;\"><a href=\"#who-is-this-article-for\" aria-label=\"who is this article for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Who is this article for?</h4>\n<p>If you're a seasoned front end developer who already knows everything about CSS, please close this tab immediately and run as fast as you can to the nearest exit. If you've never heard of or used CSS before and don't know how to load CSS into an HTML page, this resource is also not for you.</p>\n<p>This article is for the middleground of people who have had to touch CSS a few times here and there but ultimately don't feel like they know what they're doing, or struggle with making basic layouts.</p>\n<h4 id=\"topics-covered\" style=\"position:relative;\"><a href=\"#topics-covered\" aria-label=\"topics covered permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Topics covered</h4>\n<h5 id=\"html-101\" style=\"position:relative;\"><a href=\"#html-101\" aria-label=\"html 101 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML 101</h5>\n<ul>\n<li><a href=\"#html-fundamentals\">HTML Fundamentals</a></li>\n</ul>\n<h5 id=\"css-101\" style=\"position:relative;\"><a href=\"#css-101\" aria-label=\"css 101 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 101</h5>\n<ul>\n<li><a href=\"#css-syntax\">CSS Syntax</a></li>\n<li><a href=\"#css-selectors\">CSS Selectors</a></li>\n<li><a href=\"#css-specificity\">CSS Specificity</a></li>\n<li><a href=\"#css-properties\">CSS Properties</a></li>\n</ul>\n<h5 id=\"working-with-css\" style=\"position:relative;\"><a href=\"#working-with-css\" aria-label=\"working with css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Working with CSS</h5>\n<ul>\n<li>\n<p><a href=\"#spacing-out-padding-and-margins\">Spacing Out</a></p>\n<ul>\n<li><code class=\"language-text\">padding</code>, <code class=\"language-text\">margin</code>, <code class=\"language-text\">border</code></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#box-model\">Box Model</a></p>\n<ul>\n<li><code class=\"language-text\">content-box</code> vs. <code class=\"language-text\">border-box</code></li>\n</ul>\n</li>\n<li><a href=\"#shorthand-properties\">Shorthand Properties</a></li>\n<li>\n<p><a href=\"#layouts-display\">Layouts: Display</a></p>\n<ul>\n<li><code class=\"language-text\">inline</code>, <code class=\"language-text\">inline-block</code>, <code class=\"language-text\">block</code></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#layouts-positioning\">Layouts: Positioning</a></p>\n<ul>\n<li><code class=\"language-text\">static</code>, <code class=\"language-text\">fixed</code>, <code class=\"language-text\">absolute</code>, <code class=\"language-text\">relative</code></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#layouts-flex\">Layouts: Flex</a></p>\n<ul>\n<li>flex containers (<code class=\"language-text\">flex</code> display), flex items (<code class=\"language-text\">flex</code> property)</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#responsive-media-queries\">Responsive: Media Queries</a></p>\n<ul>\n<li><code class=\"language-text\">min-width</code>, <code class=\"language-text\">max-width</code></li>\n</ul>\n</li>\n<li><a href=\"#other-considerations\">Other Considerations</a></li>\n</ul>\n<h2 id=\"html-fundamentals\" style=\"position:relative;\"><a href=\"#html-fundamentals\" aria-label=\"html fundamentals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML Fundamentals</h2>\n<p>Just as a recap, we'll be talking about how CSS applies to HTML a lot, so make sure you're familiar with what everything is referring to in HTML.</p>\n<ul>\n<li><strong>Tag</strong> - element name (<em>example:</em> <code class=\"language-text\">a</code>)</li>\n<li><strong>Attribute</strong> - HTML modifiers (<em>example:</em> <code class=\"language-text\">href</code>)</li>\n<li><strong>Value</strong> - value applied to an attribute (<em>example:</em> <code class=\"language-text\">http://tania.dev</code>)</li>\n<li><strong>Element</strong> - everything within the HTML tag - attributes, values, and content.</li>\n</ul>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tag</span> <span class=\"token attr-name\">attribute</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>value<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>element contents<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tag</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>A real example:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>http://tania.dev<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Tania's WebRing<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>This will link to my awesome WebRing.</p>\n<h3 id=\"html-reference\" style=\"position:relative;\"><a href=\"#html-reference\" aria-label=\"html reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTML Reference</h3>\n<table>\n<thead>\n<tr>\n<th>Syntax</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Tag</td>\n<td><code class=\"language-text\">a</code>, <code class=\"language-text\">img</code>, <code class=\"language-text\">h1</code></td>\n</tr>\n<tr>\n<td>Attribute</td>\n<td><code class=\"language-text\">href</code>, <code class=\"language-text\">src</code>, <code class=\"language-text\">alt</code></td>\n</tr>\n<tr>\n<td>Value</td>\n<td><code class=\"language-text\">http://tania.dev</code>, <code class=\"language-text\">avatar.png</code>, <code class=\"language-text\">Some alt text</code></td>\n</tr>\n<tr>\n<td>Element</td>\n<td><code class=\"language-text\">&lt;img src=&quot;avatar.png&quot;&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<p>Now we can move on to CSS.</p>\n<h2 id=\"css-fundamentals\" style=\"position:relative;\"><a href=\"#css-fundamentals\" aria-label=\"css fundamentals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Fundamentals</h2>\n<p>I'm just going to go over some of the basics of CSS - syntax, selectors, and specificity.</p>\n<h2 id=\"css-syntax\" style=\"position:relative;\"><a href=\"#css-syntax\" aria-label=\"css syntax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Syntax</h2>\n<p>There are three main parts of CSS - selectors, properties, and values.</p>\n<ul>\n<li><strong>Selectors</strong> - the element(s) being selected</li>\n<li><strong>Properties</strong> - the aspect of the element being styled</li>\n<li><strong>Values</strong> - the style being applied</li>\n</ul>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">selector</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">property</span><span class=\"token punctuation\">:</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A real example:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will make all <code class=\"language-text\">h1</code> elements blue.</p>\n<h2 id=\"css-selectors\" style=\"position:relative;\"><a href=\"#css-selectors\" aria-label=\"css selectors permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Selectors</h2>\n<p>From <strong>least specific</strong> to <strong>most specific</strong> (more about that below), here are the main types of selectors:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Universal_selectors\"><strong>Universal selector</strong></a> - selects all elements</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\"><strong>Type selector</strong></a> - targets element(s) by HTML tag (includes <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements\">pseudo elements</a>)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors\"><strong>Class selector</strong></a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\"><strong>Attribute selector</strong></a> - targets element(s) by class or attribute, respectively (includes <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">pseudo classes</a>)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/ID_selectors\"><strong>ID selector</strong></a> - targets an element by id</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">*</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Universal selector */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">tag</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Type selector */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">tag::before</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Type selector (psuedo element) */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.class</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Class selector */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.class:hover</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Class selector (pseudo class) */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">[attr]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Attribute selector */</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">#id</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* ID selector */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>Pseudo elements</strong> have two colons (<code class=\"language-text\">::</code>, or <code class=\"language-text\">::before</code>) and <strong>pseudo classes</strong> have one colon (<code class=\"language-text\">:</code>, or <code class=\"language-text\">:hover</code>).</p>\n</blockquote>\n<h3 id=\"css-and-javascript\" style=\"position:relative;\"><a href=\"#css-and-javascript\" aria-label=\"css and javascript permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS and JavaScript</h3>\n<p>Note that even if you don't care much about CSS, learning about selectors will help you write (vanilla) JavaScript, as the DOM selectors in a JavaScript document query are the same.</p>\n<p>This query to get all elements that match a selector:</p>\n<div class=\"filename\">.js</div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'article h2'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Targets all the same elements as this CSS to style all elements that match a selector:</p>\n<div class=\"filename\">.css</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">article h2</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p><strong>Note:</strong> All selectors may target one or more elements except IDs, which can only apply to a single element.</p>\n</blockquote>\n<h3 id=\"a-space-means-something\" style=\"position:relative;\"><a href=\"#a-space-means-something\" aria-label=\"a space means something permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A space means something</h3>\n<p>Do you know the difference between these two?</p>\n<ul>\n<li><code class=\"language-text\">.foo.bar</code></li>\n<li><code class=\"language-text\">.foo .bar</code></li>\n</ul>\n<p>The first one targets a <code class=\"language-text\">foo</code> and <code class=\"language-text\">bar</code> on the same element.</p>\n<div class=\"filename\">.foo.bar example</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.foo.bar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* without a space */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>foo bar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>I'm targeted<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The second one targets a <code class=\"language-text\">bar</code> that is a descendent of a <code class=\"language-text\">foo</code>.</p>\n<div class=\"filename\">.foo .bar example</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.foo .bar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* with a space */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>foo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>I'm targeted<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>There are other selectors that can be used instead of a space to modify the selector, such as <code class=\"language-text\">&gt;</code>, <code class=\"language-text\">+</code>, and <code class=\"language-text\">~</code>. These all have different meanings. They are not used incredibly often so you can learn them as needed.</p>\n<h3 id=\"selector-reference\" style=\"position:relative;\"><a href=\"#selector-reference\" aria-label=\"selector reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Selector Reference</h3>\n<table>\n<thead>\n<tr>\n<th>Selector</th>\n<th>Targets</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Universal selector</td>\n<td>All elements</td>\n<td><code class=\"language-text\">*</code></td>\n</tr>\n<tr>\n<td>Type selector</td>\n<td>Tags, pseudo elements</td>\n<td><code class=\"language-text\">h1</code>, <code class=\"language-text\">div</code>, <code class=\"language-text\">li::before</code></td>\n</tr>\n<tr>\n<td>Class selector</td>\n<td>Classes, pseudo classes</td>\n<td><code class=\"language-text\">.page-header</code>, <code class=\"language-text\">.page-content</code>, <code class=\"language-text\">.list-item:hover</code></td>\n</tr>\n<tr>\n<td>Attribute selector</td>\n<td>Attributes</td>\n<td><code class=\"language-text\">[alt]</code>, <code class=\"language-text\">[type=&quot;text&quot;]</code>, <code class=\"language-text\">[lang=&quot;en&quot;]</code></td>\n</tr>\n<tr>\n<td>ID selector</td>\n<td>IDs</td>\n<td><code class=\"language-text\">#toggle</code>, <code class=\"language-text\">#getting-started</code>, <code class=\"language-text\">#about</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"css-specificity\" style=\"position:relative;\"><a href=\"#css-specificity\" aria-label=\"css specificity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Specificity</h2>\n<p>What does \"specificity\" mean in CSS?</p>\n<h3 id=\"order\" style=\"position:relative;\"><a href=\"#order\" aria-label=\"order permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Order</h3>\n<p>First, all things being equal, the order in which you use two selectors in the stylesheet matters. So if we have a stylesheet with two classes:</p>\n<div class=\"filename\">Comparing two selectors weighted equally</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.foo</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.bar</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and you have both of those classes on the same element:</p>\n<div class=\"filename\">An example of one element using both selectors</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>foo bar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>What color am I?<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>...then the one closest to the bottom wins. So in this case, the element's color is red, because <code class=\"language-text\">.bar</code> appears closest to the bottom of the stylesheet.</p>\n<h3 id=\"calculating-specificity\" style=\"position:relative;\"><a href=\"#calculating-specificity\" aria-label=\"calculating specificity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Calculating specificity</h3>\n<p>CSS uses a number scale to determine specificity. You can also use <a href=\"https://specificity.keegan.st/\">this specificity calculator</a> to see how specific an element is.</p>\n<p>As we know, there are three sections: <code class=\"language-text\">ID</code>, <code class=\"language-text\">Class</code>, and <code class=\"language-text\">Type</code>. In the scale, all are represented by <code class=\"language-text\">0</code> initially.</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Class</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>Any time your selector contains one of the selectors, you'll increase that bucket by 1.</p>\n<p>Add a type selector.</p>\n<div class=\"filename\">Only a type selector</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 001 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Class</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>Add a class selector.</p>\n<div class=\"filename\">Type selector plus class selector</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 011 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Class</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>Add an ID selector.</p>\n<div class=\"filename\">Type, class, and ID selector</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#landing-page .container h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 111 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Class</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n<p>You can think of this scale exactly the same as a base-10 number system. If just a tag is <code class=\"language-text\">1</code> (one), and a class and type is <code class=\"language-text\">11</code> (eleven), and an id, class, and tag is <code class=\"language-text\">111</code> (one-hundred and one), which one is the biggest? In this case, <code class=\"language-text\">111</code> is the biggest and therefore the most specific.</p>\n<blockquote>\n<p>If you had more than 10 elements in a given bucket, like <code class=\"language-text\">1</code> id, <code class=\"language-text\">15</code> classes, and <code class=\"language-text\">30</code> types, this analogy doesn't work, but you could relate it to semantic numbering systems as well - it would be <code class=\"language-text\">1.15.30</code>. However, if you're using that many selectors, something has most likely gone horribly wrong.</p>\n</blockquote>\n<p>This means a class is an order of magnitude more specific than a type, and an id is an order of magnitude more specific than a class.</p>\n<p>In other words, if you had two ids and 0 classes vs. 1 id and 20 classes, the two ids would win. For example:</p>\n<p>This selector is more specific: (<code class=\"language-text\">200</code>, or two-hundred)</p>\n<div class=\"filename\">Two ID selectors</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#landing-page #about-section</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 200 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Class</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>This selector is less specific: (<code class=\"language-text\">140</code>, or one-hundred forty)</p>\n<div class=\"filename\">An ID selector and many class selectors</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">#landing-page .foo.bar.baz.box</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* 140 */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Class</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>4</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"inline-styles\" style=\"position:relative;\"><a href=\"#inline-styles\" aria-label=\"inline styles permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inline styles</h4>\n<p>An inline style is stronger than any combination of id, class, or type.</p>\n<div class=\"filename\">Inline styles on an element</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>I'm red! No selector can override me!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h3 id=\"important\" style=\"position:relative;\"><a href=\"#important\" aria-label=\"important permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Important!</h3>\n<p>Except an <code class=\"language-text\">!important</code> keyword on a property can override even that...</p>\n<div class=\"filename\">Important keyword overriding inline styles on an element</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>I've been overridden! I'm blue now!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>Please, make very, very sparing use of <code class=\"language-text\">!important</code>. It becomes really hard to override. <code class=\"language-text\">!important</code> should only be used when absolutely necessary, like styling some third party you have no control over that is using inline styles, and in a few cases with JavaScript toggling display.</p>\n<p>To summarize, each level of hierarchy from type to <code class=\"language-text\">!important</code> is an order of magnitude stronger than the previous one. While <code class=\"language-text\">!important</code> is the strongest specificity modifier, an <code class=\"language-text\">!important</code> can be overridden by another <code class=\"language-text\">!important</code> that is otherwise higher (for example, <code class=\"language-text\">!important</code> + ID is stronger than <code class=\"language-text\">!important</code> plus class).</p>\n<h3 id=\"specificity-hierarchy\" style=\"position:relative;\"><a href=\"#specificity-hierarchy\" aria-label=\"specificity hierarchy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Specificity hierarchy</h3>\n<p>From least specific to most specific:</p>\n<table>\n<thead>\n<tr>\n<th>Selector</th>\n<th>Example</th>\n<th>Specificity</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Type selector</td>\n<td><code class=\"language-text\">h1</code></td>\n<td><code class=\"language-text\">0 0 0 1</code></td>\n</tr>\n<tr>\n<td>Class, attribute selectors</td>\n<td><code class=\"language-text\">.class</code>, <code class=\"language-text\">[type=&quot;text&quot;]</code></td>\n<td><code class=\"language-text\">0 0 1 0</code></td>\n</tr>\n<tr>\n<td>ID selector</td>\n<td><code class=\"language-text\">#contact</code></td>\n<td><code class=\"language-text\">0 1 0 0</code></td>\n</tr>\n<tr>\n<td>Inline style</td>\n<td><code class=\"language-text\">&lt;div style=&quot;background: purple&quot;&gt;</code></td>\n<td><code class=\"language-text\">1 0 0 0</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">!important</code> keyword</td>\n<td><code class=\"language-text\">div { color: green !important }</code></td>\n<td>Overrides all</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"css-properties\" style=\"position:relative;\"><a href=\"#css-properties\" aria-label=\"css properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS Properties</h2>\n<p>Here's a list of all properties that I think are absolutely essential to knowing CSS. The equivalent of knowing the most basic verbs and nouns in English that you can get by with.</p>\n<p>The minimum to be able to do anything:</p>\n<ul>\n<li><code class=\"language-text\">padding</code>, <code class=\"language-text\">margin</code>, <code class=\"language-text\">border</code></li>\n<li><code class=\"language-text\">background</code></li>\n<li><code class=\"language-text\">color</code>, <code class=\"language-text\">font-family</code>, <code class=\"language-text\">font-weight</code>, <code class=\"language-text\">font-size</code>, <code class=\"language-text\">line-height</code></li>\n<li><code class=\"language-text\">width</code>, <code class=\"language-text\">height</code>, <code class=\"language-text\">max-width</code>, <code class=\"language-text\">max-height</code></li>\n</ul>\n<p>Layout essentials:</p>\n<ul>\n<li><code class=\"language-text\">position</code>, <code class=\"language-text\">z-index</code>, <code class=\"language-text\">top</code>, <code class=\"language-text\">right</code>, <code class=\"language-text\">bottom</code>, <code class=\"language-text\">left</code></li>\n<li><code class=\"language-text\">display</code>, <code class=\"language-text\">flex</code>, <code class=\"language-text\">align-items</code>, <code class=\"language-text\">justify-content</code></li>\n<li><code class=\"language-text\">@media</code></li>\n</ul>\n<p>Good to know, but not quite as essential as the rest:</p>\n<ul>\n<li><code class=\"language-text\">grid</code>, <code class=\"language-text\">grid-template-columns</code>, <code class=\"language-text\">grid-template-rows</code></li>\n<li><code class=\"language-text\">transform</code>, <code class=\"language-text\">transition</code></li>\n</ul>\n<p>We'll go into these more in a moment. Now we should have enough of the basics down to discuss some applications of the knowledge.</p>\n<h2 id=\"spacing-out-padding-and-margins\" style=\"position:relative;\"><a href=\"#spacing-out-padding-and-margins\" aria-label=\"spacing out padding and margins permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spacing Out: Padding and Margins</h2>\n<p>All of your spacing needs will be covered by two properties: <code class=\"language-text\">padding</code> and <code class=\"language-text\">margin</code>.</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/padding\"><strong>Padding</strong></a> is used to pad the inside of an element (<em>inside of the border</em>)</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/margin\"><strong>Margin</strong></a> is used to separate elements (<em>outside of the border</em>)</li>\n</ul>\n<blockquote>\n<p>In Developer Tools, content is represented by blue, padding is represented by green and margins are represented by orange.</p>\n</blockquote>\n<p><img src=\"../images/padding1.png\"></p>\n<p>The order of nesting for an element is as follows:</p>\n<ul>\n<li>Element content -> <code class=\"language-text\">padding</code> -> <code class=\"language-text\">border</code> -> <code class=\"language-text\">margin</code></li>\n</ul>\n<p>So if I were to make an element that was a square with padding and margins, it would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.square</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 50px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/padding2.png\"></p>\n<p>A few important notes:</p>\n<ul>\n<li><strong>Margin</strong> is always transparent; <strong>padding</strong> can have a background color</li>\n<li><strong>Margins</strong> collapse into each other; <strong>padding</strong> stacks on top of each other</li>\n<li><strong>Margin</strong> can have negative values; <strong>padding</strong> cannot have negative values</li>\n<li><strong>Padding</strong> adds to the area of an element that can be clicked; <strong>margin</strong> does not</li>\n<li><strong>Padding</strong> (and border) add to the total size of an element; <strong>margin</strong> does not</li>\n</ul>\n<p>What this means is that margins overlap each other, and padding never will. This comes up a lot in formatting of headings and paragraphs, for example.</p>\n<p>Using an example of an <code class=\"language-text\">h2</code> with a <code class=\"language-text\">10px</code> bottom margin and a <code class=\"language-text\">p</code> with a <code class=\"language-text\">10px</code> top margin, how much of a margin will separate the two elements?</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">margin-bottom</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Heading<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Paragraph<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>We'll see that there is a total <code class=\"language-text\">10px</code> margin between them, not <code class=\"language-text\">20px</code>.</p>\n<p>To use a real example, in <a href=\"https://taniarascia.github.io/mvc/\">this example MVC todo app</a> I made, each todo item is padded, and they're separated from each other by margins.</p>\n<p><img src=\"../images/padding3.png\"></p>\n<h3 id=\"padding-vs-margin\" style=\"position:relative;\"><a href=\"#padding-vs-margin\" aria-label=\"padding vs margin permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Padding vs. margin</h3>\n<table>\n<thead>\n<tr>\n<th>Trait</th>\n<th>Margin</th>\n<th>Padding</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Background color</td>\n<td>Always transparent</td>\n<td>Set by element</td>\n</tr>\n<tr>\n<td>Collapse or stack</td>\n<td>Collapse</td>\n<td>Stack</td>\n</tr>\n<tr>\n<td>Negative values</td>\n<td>Allowed</td>\n<td>Not allowed</td>\n</tr>\n<tr>\n<td>Clickable</td>\n<td>No</td>\n<td>Yes</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"box-model\" style=\"position:relative;\"><a href=\"#box-model\" aria-label=\"box model permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Box Model</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing\">Box-sizing</a>! It means one thing: do padding and borders count as part of the element's size, or not?</p>\n<ul>\n<li><strong>Border box</strong> says yes! Borders and padding are part of an element's size!</li>\n<li><strong>Content box</strong> says no! Borders and padding are not part of an element's size!</li>\n</ul>\n<p>My recommendation? Set <code class=\"language-text\">box-sizing</code> to <code class=\"language-text\">border-box</code> on everything (<code class=\"language-text\">*</code>). Always. Don't even think about it! On the rare occasion something needs to be <code class=\"language-text\">content-box</code>, you can override it. This is one of the few things IE got right - making <code class=\"language-text\">border-box</code> the default while the rest of the browsers use <code class=\"language-text\">content-box</code> as the default.</p>\n<h3 id=\"border-box-vs-content-box\" style=\"position:relative;\"><a href=\"#border-box-vs-content-box\" aria-label=\"border box vs content box permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Border box vs. content box?</h3>\n<p>Let's use our square example above. With <code class=\"language-text\">content-box</code> applied, the element's total size is <code class=\"language-text\">72px * 72px</code>:</p>\n<div class=\"filename\">Content box</div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">50px for content\n2px (x) and 2px (y) for four 1px borders\n20px for 10px padding all around\n= 72px square</code></pre></div>\n<p><img src=\"../images/content-box.png\"></p>\n<p>With <code class=\"language-text\">border-box</code> applied, the element's total size is <code class=\"language-text\">50px * 50px</code>.</p>\n<div class=\"filename\">Border box</div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">28px for content\n2px (x) and 2px (y) for four 1px borders\n20px for 10px padding all around\n= 50px square</code></pre></div>\n<p><img src=\"../images/border-box.png\"></p>\n<p>If you're giving an element a <code class=\"language-text\">height</code> and <code class=\"language-text\">width</code> of <code class=\"language-text\">50px</code> each, would you prefer the element to be <code class=\"language-text\">50px</code> or <code class=\"language-text\">72px</code>? The most likely answer is that you want the height and width to match the size of the element. This will become very important when creating layouts, especially flex/grids that are set by percent.</p>\n<p>You can apply <code class=\"language-text\">border-box</code> to all elements like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">*</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(Or <a href=\"https://www.paulirish.com/2012/box-sizing-border-box-ftw/\">this way</a> if you have a specific need for <code class=\"language-text\">content-box</code> somewhere.)</p>\n<h2 id=\"shorthand-properties\" style=\"position:relative;\"><a href=\"#shorthand-properties\" aria-label=\"shorthand properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Shorthand Properties</h2>\n<p>You see me use <code class=\"language-text\">padding: 5px</code> and <code class=\"language-text\">margin: 5px</code>. The <code class=\"language-text\">padding</code> property, for example, is actually a shorthand for four individual properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* Shorthand property */</span>\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Individual properties */</span>\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding-top</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-right</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-bottom</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding-left</span><span class=\"token punctuation\">:</span> 5px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Usually, you won't have to declare each side separately. In design, we like symmetry, so if you ever end up with a different value for all four sides, something has probably gone quite wrong and you might want to rethink your strategy.</p>\n<ul>\n<li><strong>one</strong> value applies to all four sides (<code class=\"language-text\">padding: 5px</code>)</li>\n<li><strong>two</strong> values apply to vertical (top and bottom) and horizontal (left and right) respectively (<code class=\"language-text\">padding: 10px 0</code>)</li>\n<li><strong>four</strong> values are applied <strong>clockwise</strong> from top to left (<code class=\"language-text\">padding: 1px 2px 3px 4px</code>)</li>\n</ul>\n<p>This applies to both <code class=\"language-text\">padding</code> and <code class=\"language-text\">margin</code>. The most common usage of an individual side property is when you're overriding something. For example, an element exists with <code class=\"language-text\">padding: 5px</code>, and you want it to have a different padding bottom value.</p>\n<p>The next most common shorthand applies to <code class=\"language-text\">border</code>. You will most commonly see border written like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> border-width border-style border-color<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These can be written out individually as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Can also be written individually */</span>\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-color</span><span class=\"token punctuation\">:</span> black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-width</span><span class=\"token punctuation\">:</span> 1px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-style</span><span class=\"token punctuation\">:</span> solid<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And just like <code class=\"language-text\">padding</code> and <code class=\"language-text\">margin</code>, each of these border modifiers has its own side property.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border-bottom-color</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom-width</span><span class=\"token punctuation\">:</span> 2px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border-bottom-style</span><span class=\"token punctuation\">:</span> dashed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So actually when you write <code class=\"language-text\">border: 1px solid black</code> you're writing shorthand for 12 properties combined.</p>\n<h2 id=\"layouts-display\" style=\"position:relative;\"><a href=\"#layouts-display\" aria-label=\"layouts display permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layouts: Display</h2>\n<p>There are many <code class=\"language-text\">display</code> properties (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/display\">see this list</a>), but I think the most used and important to know are <code class=\"language-text\">block</code>, <code class=\"language-text\">inline</code>, <code class=\"language-text\">inline-block</code>, <code class=\"language-text\">flex</code> and <code class=\"language-text\">none</code>.</p>\n<p>Most elements by default are <code class=\"language-text\">block</code>, <code class=\"language-text\">inline</code>, or <code class=\"language-text\">inline-block</code>. The default <code class=\"language-text\">block</code> element is a <code class=\"language-text\">div</code>, and the default inline element is a <code class=\"language-text\">span</code>.</p>\n<p>Examples of default elements:</p>\n<ul>\n<li><strong>Inline</strong>: <code class=\"language-text\">span</code>, <code class=\"language-text\">strong</code>, <code class=\"language-text\">em</code>, <code class=\"language-text\">img</code></li>\n<li><strong>Inline-block</strong>: <code class=\"language-text\">button</code>, <code class=\"language-text\">select</code>, (Chrome only: <code class=\"language-text\">textarea</code>, <code class=\"language-text\">input</code>)</li>\n<li><strong>Block</strong>: <code class=\"language-text\">div</code>, <code class=\"language-text\">p</code>, <code class=\"language-text\">nav</code>, <code class=\"language-text\">section</code></li>\n</ul>\n<blockquote>\n<p>There a few other obvious, specific ones, such as <code class=\"language-text\">table</code> elements having the <code class=\"language-text\">table</code> display, and <code class=\"language-text\">li</code> having the <code class=\"language-text\">list-item</code> display, but you will rarely decide to make some other element have that display type.</p>\n</blockquote>\n<h4 id=\"inline\" style=\"position:relative;\"><a href=\"#inline\" aria-label=\"inline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inline</h4>\n<p><strong>Inline</strong> elements are usually text formatting based: <code class=\"language-text\">b</code> or <code class=\"language-text\">strong</code>, which make text bold, or <code class=\"language-text\">i</code> and <code class=\"language-text\">em</code> which make text italic. They are on the same line - they do not create a new line. Inline elements are usually nested within block elements. Horizontal and vertical padding and margins are applied as expected, but vertical margins are not applied at all, and vertical padding is ignored by other elements.</p>\n<div class=\"filename\">Inline element behavior</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">content content...<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>span<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>..content content</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">span</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* inline by default */</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/inline.png\"></p>\n<p>To be safe, inline elements should only be used for text formatting.</p>\n<h4 id=\"inline-block\" style=\"position:relative;\"><a href=\"#inline-block\" aria-label=\"inline block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Inline block</h4>\n<p><strong>Inline-block</strong> elements are like inline elements, except they can have vertical and horizontal padding and margins. They also appear next to each other horizontally by default, and do not stack on new lines.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">span</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/inline-block.png\"></p>\n<h4 id=\"block\" style=\"position:relative;\"><a href=\"#block\" aria-label=\"block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Block</h4>\n<p><strong>Block</strong> elements span the full width of their containing element, and stack on top of each other in new lines of the document.</p>\n<div class=\"filename\">Block element behavior</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\">content content...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n..content content</code></pre></div>\n<p><img src=\"../images/block-element.png\"></p>\n<h4 id=\"none\" style=\"position:relative;\"><a href=\"#none\" aria-label=\"none permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>None</h4>\n<p>An element with <strong>none</strong> applied will not appear in the document at all. This is most commonly used for hiding/displaying content for mobile.</p>\n<h3 id=\"display-reference\" style=\"position:relative;\"><a href=\"#display-reference\" aria-label=\"display reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Display Reference</h3>\n<table>\n<thead>\n<tr>\n<th>Display</th>\n<th>Behavior</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">inline</code></td>\n<td>used primarily for text formatting, appear next to each other horizontally</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">inline-block</code></td>\n<td>appear next to each other horizontally with vertical padding and margins applied</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">block</code></td>\n<td>spans the full width of the container, stack vertically</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">none</code></td>\n<td>does not appear in the document</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"layouts-positioning\" style=\"position:relative;\"><a href=\"#layouts-positioning\" aria-label=\"layouts positioning permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layouts: Positioning</h2>\n<p>The <code class=\"language-text\">position</code> property, while important, is not what you should be using for the majority of layout related decisions. Changing <code class=\"language-text\">position</code> from it's default value (<code class=\"language-text\">static</code>) should be reserved for a few specific situations. There are three that are mainly used: <code class=\"language-text\">fixed</code>, <code class=\"language-text\">absolute</code>, and <code class=\"language-text\">relative</code>. A positioned element is affected by <code class=\"language-text\">top</code>, <code class=\"language-text\">left</code>, <code class=\"language-text\">right</code>, <code class=\"language-text\">bottom</code> and <code class=\"language-text\">z-index</code>.</p>\n<h3 id=\"normal-flow\" style=\"position:relative;\"><a href=\"#normal-flow\" aria-label=\"normal flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Normal flow</h3>\n<p>If you do not modify the <code class=\"language-text\">position</code> of any element, everything pertains to the <a href=\"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Normal_Flow\">Normal flow</a> of the document. All this means is that:</p>\n<ul>\n<li>block level elements will take up the <strong>full width</strong> of their <strong>container</strong>, and the height of their content</li>\n<li>block level elements will stack on top of each other vertically, from top to bottom</li>\n<li>inline elements are as tall and wide as their content</li>\n<li>all elements are aware of each other, and margins will collapse</li>\n</ul>\n<h3 id=\"static\" style=\"position:relative;\"><a href=\"#static\" aria-label=\"static permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static</h3>\n<p>The default state of <code class=\"language-text\">position</code> is <code class=\"language-text\">static</code>. It means your element stays in the normal flow of the document. If you have three static <code class=\"language-text\">div</code>s next to each other, they will all be aware of each other and stack on top of each other.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/div.png\"></p>\n<p><code class=\"language-text\">static</code> elements are not positioned, and therefore not affected by <code class=\"language-text\">top</code>, <code class=\"language-text\">left</code>, <code class=\"language-text\">right</code>, <code class=\"language-text\">bottom</code>, or <code class=\"language-text\">z-index</code>.</p>\n<blockquote>\n<p><strong>Note:</strong> Just because elements have a <code class=\"language-text\">static</code> position does not always mean they will stack each other vertically. The <code class=\"language-text\">display</code> property might modify this, with <code class=\"language-text\">inline-block</code>, <code class=\"language-text\">grid</code>, or <code class=\"language-text\">flex</code>, but they will still be part of the regular document flow and other elements will be aware of them.</p>\n</blockquote>\n<h3 id=\"fixed\" style=\"position:relative;\"><a href=\"#fixed\" aria-label=\"fixed permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fixed</h3>\n<p>A <code class=\"language-text\">fixed</code> element is the easiest position to understand: it is always visible and positioned according to the viewport.</p>\n<p>A few common uses of <code class=\"language-text\">fixed</code> positioning:</p>\n<ul>\n<li>a stick-to-top <strong>navigation bar</strong></li>\n<li>a <strong>back to top</strong> button in the bottom right of the screen</li>\n<li>a <strong>popup modal</strong> that is in the center of the viewport</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">nav</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A few things to know about <code class=\"language-text\">fixed</code> elements:</p>\n<ul>\n<li>their position on the screen is determined by <code class=\"language-text\">top</code>, <code class=\"language-text\">left</code>, <code class=\"language-text\">right</code>, and <code class=\"language-text\">bottom</code> properties. <code class=\"language-text\">top: 0</code> means it will stick to the top of the viewport, and <code class=\"language-text\">top: 10px</code> means it will be <code class=\"language-text\">10px</code> from the top of the viewport</li>\n<li>other elements are <strong>not aware</strong> of the existence of a <code class=\"language-text\">fixed</code> element. This generally means you must account for the space they would occupy by <strong>adding margins</strong> to the elements around them.</li>\n<li><code class=\"language-text\">fixed</code> elements are no longer part of the flow and do not have a containing element, and therefore do not expand to fill their container like a normal (block) element would.</li>\n</ul>\n<p>This means if all we do is set our <code class=\"language-text\">nav</code> to fixed with no other properties, it will not expand the full width of the viewport.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">></span></span>nav<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid black<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> white<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">nav</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/nav.png\"></p>\n<p>So we can update it to be full width, and stick to the top and left of the viewport:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">nav</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> fixed<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 20px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> gray<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/nav2.png\"></p>\n<p>We're adding the <code class=\"language-text\">z-index</code> property, which affects the z-axis of the element. Since we intend this element to always be completely visible, we give it a <code class=\"language-text\">z-index</code> greater than <code class=\"language-text\">0</code> to ensure it's always \"above\" any element in our document. As we can see, there's one last issue, which is that the <code class=\"language-text\">nav</code> is overlapping the content. As mentioned previously, you <em>must</em> add space (margins) to <code class=\"language-text\">static</code> elements to make space for the <code class=\"language-text\">fixed</code> element. Simply adding a <code class=\"language-text\">margin-bottom</code> to the <code class=\"language-text\">nav</code> won't have any effect.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">></span></span>nav<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">section</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 80px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/nav3.png\"></p>\n<p>So now we have that all taken care of and <code class=\"language-text\">fixed</code> positioning should make sense.</p>\n<h3 id=\"absolute-and-relative\" style=\"position:relative;\"><a href=\"#absolute-and-relative\" aria-label=\"absolute and relative permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Absolute and relative</h3>\n<p><code class=\"language-text\">absolute</code> and <code class=\"language-text\">relative</code> positions go hand in hand. Take everything you just learned about <code class=\"language-text\">fixed</code> elements and apply them to <code class=\"language-text\">absolute</code> elements. They behave almost exactly the same: other elements don't know about <code class=\"language-text\">absolute</code> elements, they're affected by the directional properties and <code class=\"language-text\">z-index</code>. The difference is instead of being positioned relative to the viewport (browser window), they're positioned relative to the nearest element that is not <code class=\"language-text\">static</code> - so a <code class=\"language-text\">fixed</code>, <code class=\"language-text\">absolute</code>, or <code class=\"language-text\">relative</code> element.</p>\n<p><code class=\"language-text\">relative</code> elements, on the other hand, behave almost exactly the same as a <code class=\"language-text\">static</code> element - they are part of the document flow, and simply setting <code class=\"language-text\">relative</code> to an element will not change its appearance at all. The difference is a <code class=\"language-text\">relative</code> element <em>can</em> use the directional properties - <code class=\"language-text\">top</code>, <code class=\"language-text\">left</code>, <code class=\"language-text\">right</code>, and <code class=\"language-text\">bottom</code>.</p>\n<p>However, the most common usage of <code class=\"language-text\">relative</code> and <code class=\"language-text\">absolute</code> is that a <code class=\"language-text\">relative</code> element is treated as <code class=\"language-text\">static</code>, but as an <strong>anchor point</strong> for some other <code class=\"language-text\">absolute</code> element.</p>\n<p>I'll make an example with a <code class=\"language-text\">section</code> (red) that has a nested <code class=\"language-text\">div</code> (blue).</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span>\n  section\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>With no positioning applied, the <code class=\"language-text\">div</code> is contained inside of the <code class=\"language-text\">section</code>.</p>\n<p><img src=\"../images/absolute1.png\"></p>\n<p>Now imagine I have a bunch of card elements that are always <code class=\"language-text\">100px</code> tall, regardless of the content contained within, and I want a button to always exist at the same spot on the bottom right. Using <code class=\"language-text\">relative</code> and <code class=\"language-text\">absolute</code>, the <code class=\"language-text\">div</code> will always be in the same spot on any card.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">section</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/absolute2.png\"></p>\n<p>To summarize, use <code class=\"language-text\">relative</code> when you want something else to be anchored to an element but you don't want that element itself to move or be affected at all, and use <code class=\"language-text\">absolute</code> on the element to be anchored. A common usage of this is card-like elements.</p>\n<p>This <a href=\"https://taniarascia.github.io/card/\">card element</a> is an example of absolute coming in handy to make sure they're always the same size but the buttons line up.</p>\n<p><img src=\"../images/absolute3.png\"></p>\n<h3 id=\"positioning-reference\" style=\"position:relative;\"><a href=\"#positioning-reference\" aria-label=\"positioning reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Positioning Reference</h3>\n<table>\n<thead>\n<tr>\n<th>Position</th>\n<th>Behavior</th>\n<th>In Document Flow</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">static</code></td>\n<td>default behavior; elements stack in order and are aware of each other</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">relative</code></td>\n<td>positioned relative to its original position in the flow</td>\n<td>Yes</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">fixed</code></td>\n<td>positioned relative to the viewport</td>\n<td>No</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">absolute</code></td>\n<td>positioned relative to closest non-static (<code class=\"language-text\">fixed</code>, <code class=\"language-text\">relative</code>, <code class=\"language-text\">absolute</code>) element</td>\n<td>No</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"layouts-flex\" style=\"position:relative;\"><a href=\"#layouts-flex\" aria-label=\"layouts flex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Layouts: Flex</h2>\n<p>The <code class=\"language-text\">block</code>, <code class=\"language-text\">inline-block</code>, and <code class=\"language-text\">inline</code> display types all apply to the element itself. <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout\">Flexbox</a> is different, because it applies to elements nested within the one that has <code class=\"language-text\">display: flex</code>. There are many resources that go deep into Flexbox and everything it's capable of, but I'm just going to tell you the basic stuff you can always do to easily make layouts.</p>\n<h3 id=\"history-lesson\" style=\"position:relative;\"><a href=\"#history-lesson\" aria-label=\"history lesson permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>History lesson</h3>\n<p>In the beginning, HTML documents were basically the same as MS Word documents: you had headings, paragraphs, and the occasional image. People started wanting more advanced layouts, so they began using tables to create their layouts. Since the purpose of tables was (and is) only to display tabular data, the HTML people wrote to create layouts became messier and messier.</p>\n<p>Eventually, someone discovered that they could use the <code class=\"language-text\">float</code> property to move things to the left and right of the page, instead of tables. This made the markup a little cleaner and easier to understand, but again, this was another attempt to mutate something for a purpose it was never designed to do. CSS floats were (and are) for \"floating\" images in an article to the left or right (like you might see in a magazine), not for creating a layout. Nonetheless, for years we were stuck with the <code class=\"language-text\">float</code> property to create some semblance of a unique layout without using tables.</p>\n<p>Now we have Flexbox and CSS grid for creating layouts, and we basically never have to touch <code class=\"language-text\">float</code> except for its rare, actual purpose. This doesn't apply if you have to support older versions of Internet Explorer, but if you do, there are more than enough resources to understand how floats were used during this time.</p>\n<h3 id=\"creating-a-flex-container\" style=\"position:relative;\"><a href=\"#creating-a-flex-container\" aria-label=\"creating a flex container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Creating a flex container</h3>\n<p>We already know that a bunch of default block elements will stack each other:</p>\n<div class=\"filename\">Stacked elements</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p><img src=\"../images/flex1.png\"></p>\n<p>So how do we get elements to be side-by-side? We can make the outer container a flex container.</p>\n<div class=\"filename\">Elements in a default flex container</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>flex-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.flex-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/flex2.png\"></p>\n<p>And just like that, all the inner elements are now stacked horizontally in a row. By default, a flex container is set to <code class=\"language-text\">flex-direction: row</code>. Note that only the first layer of elements will be flex items - elements nested further within them will behave normally. You can also update it to <code class=\"language-text\">flex-direction: column</code> and the items will be stacked vertically, as they were originally.</p>\n<p>Here are a few cool things flex can do:</p>\n<ul>\n<li>vertically align elements with ease</li>\n<li>space items apart or group them together easily</li>\n<li>create repeating grids</li>\n</ul>\n<h3 id=\"alignment-create-a-navigation-bar-with-flex\" style=\"position:relative;\"><a href=\"#alignment-create-a-navigation-bar-with-flex\" aria-label=\"alignment create a navigation bar with flex permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Alignment: create a navigation bar with flex</h3>\n<p>Let's make a practical example to demonstrate some of what flex is capable of: a navigation bar. Here's what we want it to look like:</p>\n<ul>\n<li>brand name to the left</li>\n<li>nav links to the right</li>\n<li>all items vertically centered</li>\n</ul>\n<div class=\"filename\">navbar.html</div>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>nav</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>Brand name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>About<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#!<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Contact<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>nav</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"filename\">navbar.css</div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">nav</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 80px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Without any regard to layout applied, here's how it looks.</p>\n<p><img src=\"../images/flex3.png\"></p>\n<p>We'll make the navbar flex, so the brand name and nav links will be horizontal.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">nav</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/flex4.png\"></p>\n<p>Now we want everything to be vertically aligned. With <code class=\"language-text\">align-items: center</code>, we can vertically align items within a flex container.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">nav</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/flex5.png\"></p>\n<p>Now we want the brand and links to be on opposite ends of the navbar. With <code class=\"language-text\">justify-content: space-between</code>, we can tell the items in the flex container to be spaced apart as far as possible.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">nav</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> space-between<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/flex6.png\"></p>\n<p>Then just add a little padding and you have an acceptable navbar.</p>\n<p><img src=\"../images/flex7.png\"></p>\n<p>I believe without knowing anything else about flex, you can get pretty far with just those properties. When thinking about any of the other values that can be applied to flex alignment, just think about the navigation bar. The brand and group of links are two items in a flex row.</p>\n<ul>\n<li><code class=\"language-text\">align-items</code> refers to the <strong>vertical alignment</strong>: <code class=\"language-text\">flex-start</code> would be the top, <code class=\"language-text\">flex-end</code> would be the bottom, and <code class=\"language-text\">center</code> is vertically aligned.</li>\n<li><code class=\"language-text\">justify-content</code> refers to the <strong>horizontal spacing</strong>: <code class=\"language-text\">start</code> would be all items to the left, <code class=\"language-text\">end</code> would be all items to the right, <code class=\"language-text\">center</code> is everything in the middle, and <code class=\"language-text\">space-between</code> is everything equally spaced apart.</li>\n</ul>\n<blockquote>\n<p><strong>Note:</strong> Flex is also capable of reversing rows and columns. In addition to <code class=\"language-text\">flex-direction: row</code>, and <code class=\"language-text\">flex-direction: column</code>, there is also <code class=\"language-text\">row-reverse</code> and <code class=\"language-text\">column-reverse</code>. This would reverse the expectation of <code class=\"language-text\">align-items</code> and <code class=\"language-text\">justify-content</code> as well. For example, <code class=\"language-text\">justify-content: start</code> would be on the right of a <code class=\"language-text\">row-reverse</code> flex container.</p>\n</blockquote>\n<p><strong>Further reading</strong>: <a href=\"https://flexboxfroggy.com/\">Flexbox Froggy</a> is a game for learning and practicing Flexbox that might come in handy.</p>\n<h3 id=\"flex-container-reference\" style=\"position:relative;\"><a href=\"#flex-container-reference\" aria-label=\"flex container reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flex Container Reference</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Values</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">flex-direction</code></td>\n<td><code class=\"language-text\">row</code>, <code class=\"language-text\">column</code>, <code class=\"language-text\">row-reverse</code>, <code class=\"language-text\">column-reverse</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">flex-wrap</code></td>\n<td><code class=\"language-text\">wrap</code>, <code class=\"language-text\">nowrap</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">align-items</code></td>\n<td><code class=\"language-text\">flex-start</code>, <code class=\"language-text\">flex-end</code>, <code class=\"language-text\">center</code>, <code class=\"language-text\">stretch</code>, <code class=\"language-text\">baseline</code></td>\n</tr>\n<tr>\n<td><code class=\"language-text\">justify-content</code></td>\n<td><code class=\"language-text\">start</code>, <code class=\"language-text\">center</code>, <code class=\"language-text\">end</code>, <code class=\"language-text\">space-between</code>, <code class=\"language-text\">space-around</code>, <code class=\"language-text\">space-evenly</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"wrapping-create-a-repeating-grid\" style=\"position:relative;\"><a href=\"#wrapping-create-a-repeating-grid\" aria-label=\"wrapping create a repeating grid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wrapping: Create a repeating grid</h3>\n<p>Often, you might have a bunch of cards or images in a gallery that should be in a repeating grid. By default, with a flex container, the horizontal items will continue forever horizontally.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>flex-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>div<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  ...\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.flex-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/repeating.png\"></p>\n<p>We can make the grid repeat onto as many lines as necessary with <code class=\"language-text\">flex-wrap</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.flex-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> wrap<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/repeating2.png\"></p>\n<p>This is great. But wait...it only works when the elements have no content. What if I fill them with a lot of text?</p>\n<p><img src=\"../images/repeating3.png\"></p>\n<p>Now this seems pretty useless. But with a tiny bit of flex magic, we can transform it back to a grid:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/repeating4.png\"></p>\n<p>So what does <code class=\"language-text\">flex: 1</code> do? It tells all flex items in a container, if they all have it applied, to automatically have an equal height and width. <code class=\"language-text\">flex</code> is another shorthand for three properties: <code class=\"language-text\">flex-grow</code>, <code class=\"language-text\">flex-shrink</code>, and <code class=\"language-text\">flex-basis</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.element</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* is the same as */</span>\n\n<span class=\"token selector\">.element</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> 1<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> 0%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* flex shorthand */</span>\n<span class=\"token selector\">.element</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> flex-grow flex-shrink flex-basis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Two flex elements set to <code class=\"language-text\">flex: 1</code> will both be 50% of the width of the container. Three will both be 33.3333% of the width of the container, and so on.</p>\n<p>But this is still kind of random. Keep adding more divs, and once it decides that no more can fit, and to wrap to the next line (if <code class=\"language-text\">flex-wrap</code> is set). Then the element that gets wrapped will now take up 100% of the row.</p>\n<p><img src=\"../images/repeating5.png\"></p>\n<p>What if you always want each element to take up 1/3 of the available horizontal space, regardless of how many flex items there are and what content they contain? You can set the <code class=\"language-text\">flex-basis</code> only, to the width you desire.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 0 0 33.3333%<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Remember the Box Model, from earlier? If you have any padding on your flex items, you <em>must</em> have <code class=\"language-text\">box-sizing: border-box</code> for the percentage to be calculated correctly. If that's taken care of, it will correctly calculate each flex item to the proper 33.33333% width of the screen.</p>\n<p>But there is one more consideration - if you want gutters in your grid, you'll use margins to separate each item. Since the margins are calculated separately, you'll need to subtract the outer margins from the <code class=\"language-text\">flex-basis</code>. In this example, there's an extra <code class=\"language-text\">10px</code> margin on both sides, so we'll subtract <code class=\"language-text\">20px</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">div</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 0 0 <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>33.3333% - 20px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"../images/repeating6.png\"></p>\n<p>You can easily make simple grids by either setting the <code class=\"language-text\">flex-basis</code> (setting one to <code class=\"language-text\">25%</code> and one to 75%, for example) or with varying <code class=\"language-text\">flex-grow</code>/<code class=\"language-text\">flex-shrink</code> combinations (<code class=\"language-text\">flex: 1</code> on one element and <code class=\"language-text\">flex: 2</code> on another element would result in a <code class=\"language-text\">33.3-%</code> / <code class=\"language-text\">66.6-%</code> split, respectively).</p>\n<h3 id=\"flex-property-reference\" style=\"position:relative;\"><a href=\"#flex-property-reference\" aria-label=\"flex property reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flex Property Reference</h3>\n<table>\n<thead>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">flex-grow</code></td>\n<td>Determines how much a flex item should grow if there's space available</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">flex-shrink</code></td>\n<td>Determines how much a flex item should shrink if there's not space available</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">flex-basis</code></td>\n<td>Defines initial size of flex item</td>\n</tr>\n</tbody>\n</table>\n<p>Finally, there is also an <code class=\"language-text\">order</code> property, in which you can rearrange the order of flex items.</p>\n<h2 id=\"responsive-media-queries\" style=\"position:relative;\"><a href=\"#responsive-media-queries\" aria-label=\"responsive media queries permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Responsive: Media Queries</h2>\n<p>Use <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\">media queries</a> to make your websites responsive, or adaptive to multiple screen sizes. With media queries, you tell CSS to only apply on screen sizes <em>below</em> a certain width (with <code class=\"language-text\">max-width</code> queries) or <em>above</em> a certain width (with <code class=\"language-text\">min-width</code> queries).</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* applies styles to any device screen sizes above 800px wide */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* applies styles to any device screen sizes below 800px wide */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you've ever heard the term <strong>mobile-first</strong>, this refers to building a website for mobile first, and creating <code class=\"language-text\">min-width</code> media queries as necessary as the screen sizes go up.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token comment\">/* Mobile first styles go here */</span>\n\n<span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* Desktop styles go here */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is much easier to design a website mobile-first and scale up as needed, than trying to take a website that is only optimized for desktop and making it mobile-friendly with <code class=\"language-text\">min-width</code> media queries. If you're doing it from scratch, I would recommend starting mobile first and using <code class=\"language-text\">min-width</code> queries, but if you have to quickly make a desktop site work for mobile, it's easier and faster to add <code class=\"language-text\">max-width</code> queries here and there as needed.</p>\n<p>All CSS frameworks deal with these different queries, or responsive breakpoints, slightly differently. If we look at <a href=\"https://getbootstrap.com/docs/4.0/layout/overview/#responsive-breakpoints\">Bootstrap's responsive breakpoints</a>, we can see they have five breakpoints, from extra small to extra large. Personally, I find that having one breakpoint (no breakpoint for mobile, and one for desktop) or two breakpoints (no breakpoint for mobile, one for tablet, and one for desktop) takes care of most of my responsive needs.</p>\n<p>Note that <code class=\"language-text\">@media</code> can be nested within a selector. In this example, an <code class=\"language-text\">h1</code> has font size of <code class=\"language-text\">28px</code> by default, but <code class=\"language-text\">32px</code> on larger screen sizes.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 28px<span class=\"token punctuation\">;</span>\n\n  <span class=\"token atrule\"><span class=\"token rule\">@media</span> screen and <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 32px<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"other-considerations\" style=\"position:relative;\"><a href=\"#other-considerations\" aria-label=\"other considerations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Other Considerations</h2>\n<p>This article is getting incredibly long, and there's still plenty I haven't covered. Here's a few quick answers and additional resources to the holes in my attempt to cover everything at once.</p>\n<p>To get an idea of how I generally like to style my CSS, take a look at <a href=\"https://taniarascia.github.io/primitive/\">Primitive CSS</a>, the CSS/Sass framework I designed a few years ago, which contains a clean Sass setup and sensible defaults. Creating your own CSS framework and grid is a fun, challenging way to really learn CSS, and I highly recommend it!</p>\n<h3 id=\"when-should-i-style-ids-classes-or-tags\" style=\"position:relative;\"><a href=\"#when-should-i-style-ids-classes-or-tags\" aria-label=\"when should i style ids classes or tags permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>When should I style ids, classes, or tags?</h3>\n<p>My rules are as follows: IDs are exclusively used for JavaScript purposes. To easily target an individual element with JavaScript, you can use an ID, and know that it has no affect on the style. If you wish, you could also \"scope\" sections of content by nesting everything in an ID, though I don't personally do that.</p>\n<p>For tags, <em>never</em> style elements like <code class=\"language-text\">main</code>, <code class=\"language-text\">article</code>, <code class=\"language-text\">div</code>, <code class=\"language-text\">section</code>, <code class=\"language-text\">aside</code>, etc. You should always feel secure that these elements will be unstyled and only denote the type of content they contain. If you wish to add styling to them, create classes like <code class=\"language-text\">.container</code>. I usually give some default styling to <code class=\"language-text\">h1</code> through <code class=\"language-text\">h5</code>, <code class=\"language-text\">p</code>, <code class=\"language-text\">ul</code>, <code class=\"language-text\">ol</code>, <code class=\"language-text\">li</code>, <code class=\"language-text\">a</code>, and <code class=\"language-text\">table</code>.</p>\n<p>For most other styling, I use classes. Try to make classes \"semantic\" by describing what they are, not what they do. For example, having a class called <code class=\"language-text\">.app-sidebar</code> would be acceptable, but having <code class=\"language-text\">.bg-white</code>, <code class=\"language-text\">.blue-border</code>, <code class=\"language-text\">.large-text</code> ultimately becomes difficult to maintain. (A few helper classes, such as the Bootstrap <a href=\"https://getbootstrap.com/docs/4.3/utilities/spacing/\">spacing utilities</a> can come in handy).</p>\n<p><strong>Further reading</strong>: <a href=\"https://css-tricks.com/the-difference-between-id-and-class/\">The Difference Between ID and Class</a></p>\n<h3 id=\"what-should-i-use-for-font-size---px-vs-em-vs-rem\" style=\"position:relative;\"><a href=\"#what-should-i-use-for-font-size---px-vs-em-vs-rem\" aria-label=\"what should i use for font size   px vs em vs rem permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What should I use for font size - px vs. em vs. rem?</h3>\n<p>I use pixels (<code class=\"language-text\">px</code>) on borders, and <code class=\"language-text\">rem</code> on all font sizes, padding, and margins. I don't use <code class=\"language-text\">em</code> at all, as using it has more possible unintended consequences on nested elements (although I used <code class=\"language-text\">px</code> on all examples throughout this resource for simplicity and familiarity).</p>\n<p><strong>Further reading</strong>: <a href=\"https://www.element84.com/blog/responsive-typography\">Responsive Typography: rem, em, and px</a>, <a href=\"https://webdesign.tutsplus.com/tutorials/comprehensive-guide-when-to-use-em-vs-rem--cms-23984\">Comprehensive Guide: When to Use Em vs Rem</a></p>\n<h3 id=\"what-about-sass-or-less\" style=\"position:relative;\"><a href=\"#what-about-sass-or-less\" aria-label=\"what about sass or less permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What about Sass? Or LESS?</h3>\n<p>I prefer to use Sass for all CSS preprocessing, much like the popular CSS framework, <a href=\"https://getbootstrap.com/\">Bootstrap</a>. It also works fantastically out-of-the-box with the JavaScript framework, <a href=\"https://vuex.vuejs.org/\">Vue</a>. LESS is generally less popular and I don't prefer it, but <a href=\"https://ant.design/\">Ant Design</a> and <a href=\"https://semantic-ui.com/\">Semantic UI</a> do. You can also use tools like <a href=\"https://postcss.org/\">PostCSS</a> to compile the latest CSS to something most browsers can understand (much like Babel with ES6).</p>\n<p><strong>Further reading</strong>: <a href=\"/learn-sass-now/\">Learn Sass Now: A Guide to Installing and Understanding Sass</a></p>\n<h3 id=\"what-about-prefixes\" style=\"position:relative;\"><a href=\"#what-about-prefixes\" aria-label=\"what about prefixes permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What about prefixes?</h3>\n<p>Browsers have been known to have inconsistencies with each other regarding CSS, and you might see <code class=\"language-text\">-webkit</code>, <code class=\"language-text\">-moz</code>, <code class=\"language-text\">-ms</code>, and <code class=\"language-text\">-o</code> prefixes for various properties that might not work on all browsers, or may have been experimental in some earlier browsers, like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.flex</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -webkit-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -moz-box<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -ms-flexbox<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> -webkit-flex<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Use something like <a href=\"https://github.com/postcss/autoprefixer\">Autoprefixer</a> with <a href=\"https://webpack.js.org/\">Webpack</a>, <a href=\"https://gulpjs.com/\">Gulp</a> or <a href=\"https://gruntjs.com/\">Grunt</a>, whatever you may be using for bundling or task running. You should never have to write out or remember prefixes.</p>\n<h3 id=\"what-about-css-grid\" style=\"position:relative;\"><a href=\"#what-about-css-grid\" aria-label=\"what about css grid permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What about CSS grid?</h3>\n<p>I'll be honest, almost every time I create something in CSS grid, I end up converting it to Flexbox because I find it easier to work with and more intuitive. I didn't cover grid in this article because it's too big of a subject to just tack on at the end. See the further reading for many examples you can play around with.</p>\n<p><strong>Further reading</strong>: <a href=\"https://gridbyexample.com/examples/\">Grid by Example - the examples</a></p>\n<h3 id=\"bem-oocss-smacsshow-should-i-structure-my-css\" style=\"position:relative;\"><a href=\"#bem-oocss-smacsshow-should-i-structure-my-css\" aria-label=\"bem oocss smacsshow should i structure my css permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BEM, OOCSS, SMACSS...how should I structure my CSS?</h3>\n<p>A lot of people have come up with a lot of solutions on how to structure your CSS - <a href=\"http://getbem.com/introduction/\">BEM</a>, <a href=\"http://oocss.org/\">OOCSS</a>, <a href=\"http://smacss.com/\">SMACSS</a>...BEM (Block-Element-Modifier) seems to be one of the more popular and prevailing. I personally prefer not to use any of these in specific (and I don't like using underlines in CSS at all).</p>\n<h3 id=\"what-else\" style=\"position:relative;\"><a href=\"#what-else\" aria-label=\"what else permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What else?</h3>\n<p>Use numbers (as percents) on <code class=\"language-text\">line-height</code>. I prefer <code class=\"language-text\">line-height: 1.2</code> for headings, and <code class=\"language-text\">line-height: 1.6</code> for font (using the <a href=\"https://pearsonified.com/golden-ratio-typography-intro/\">Golden Ratio</a>).</p>\n<p>You can use the pseudo class/function <code class=\"language-text\">:not()</code> to target every element that doesn't match what you input. Here's a useful one for ensuring all headings, except for the first one in a section, have some extra spacing.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">h1:not(:first-child),\nh2:not(:first-child),\nh3:not(:first-child)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> 2.5rem<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Always have a <code class=\"language-text\">.container</code> element handy, that looks something like this (<code class=\"language-text\">max-width</code> and <code class=\"language-text\">padding</code> can be changed up to whatever you want).</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will make your content pretty responsive by default. You'll have padding around the content on mobile, and the content won't expand too far on desktop screens, and will be horizontally centered (this is what happens when <code class=\"language-text\">auto</code> is applied to both margins).</p>\n<p>Don't spread text out too wide. Think about a page in a book; you wouldn't want one page to be too wide, or reading it is oddly stressful. I like to make a small container for text-only, to ensure articles and text aren't too wide.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.small-container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0 15px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-right</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Use <code class=\"language-text\">max-width: 100%</code> and <code class=\"language-text\">height: auto</code> for responsive images. This way, the image will retain it's original aspect ratio, but resize according to the width of its container.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">img.responsive-image</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Finally, I didn't get into transitions and animations, but I think those are overall less important than the concepts I laid out here today.</p>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>I hope this was a useful introduction to all things CSS, from the fundamentals of selectors and specificity, to layouts and positioning. No matter how much you read about and study CSS, I don't think it can feel natural without a lot of practice. I recommend looking at some designs of websites you like and trying to replicate them without looking at the source code.</p>","timeToRead":39,"excerpt":"Das Anwenden von CSS ist wie das Sprechen einer gesprochenen Sprache - es gibt viele Wörter, von denen Du nur eine kleine Teilmenge täglich…","frontmatter":{"title":"CSS: An Art, a Science, a Nightmare (Everything You Should Know)","thumbnail":null,"slug":"overview-of-css-concepts","date":"2019-12-02T00:00:00.000Z","categories":["Design"],"tags":["CSS"],"template":"post"},"fields":{"slug":"/overview-of-css-concepts/","date":"2019-12-02T00:00:00.000Z"}}},"pageContext":{"slug":"/overview-of-css-concepts/"}}}