{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/react-lernen-react-modern-datenabruf/",
    "result": {"data":{"allWebmention":{"totalCount":0,"edges":[]},"markdownRemark":{"html":"<h2 id=\"datenabruf-mit-react\" style=\"position:relative;\"><a href=\"#datenabruf-mit-react\" aria-label=\"datenabruf mit react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Datenabruf mit React</h2>\n<p>In der Beispielanwendung verwenden wir Pseudodaten, die aus einem selbsterstellten Promise-Objekt stammen. Die bisherigen Lektionen zu asynchronem Datenmanagement und erweiterter Statusverwaltung stellend eine Grundlage für diesen Abschnitt dar. Als Nächstes rufen wir Daten von einer echten Drittanbieter-API ab. Dazu verwenden wir die zuverlässige und informative <a href=\"https://hn.algolia.com/api\">Hacker News API</a>.</p>\n<p>Anstatt das Array <code class=\"language-text\">initialStories</code> und die Funktion <code class=\"language-text\">getAsyncStories</code> zu verwenden, rufen wir die Daten direkt von der API ab.</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"js\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">// A</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"># </span><span class=\"mtk12\">start</span><span class=\"mtk1\">-</span><span class=\"mtk12\">insert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk12\">API_ENDPOINT</span><span class=\"mtk1\"> = </span><span class=\"mtk8\">&#39;https://hn.algolia.com/api/v1/search?query=&#39;</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"># </span><span class=\"mtk12\">end</span><span class=\"mtk1\">-</span><span class=\"mtk12\">insert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">const</span><span class=\"mtk1\"> </span><span class=\"mtk11\">App</span><span class=\"mtk1\"> = () </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  </span><span class=\"mtk12\">React</span><span class=\"mtk1\">.</span><span class=\"mtk11\">useEffect</span><span class=\"mtk1\">(() </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">dispatchStories</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">type:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;STORIES_FETCH_INIT&#39;</span><span class=\"mtk1\"> });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"># </span><span class=\"mtk12\">start</span><span class=\"mtk1\">-</span><span class=\"mtk12\">insert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">fetch</span><span class=\"mtk1\">(</span><span class=\"mtk8\">`</span><span class=\"mtk4\">${</span><span class=\"mtk12\">API_ENDPOINT</span><span class=\"mtk4\">}</span><span class=\"mtk8\">react`</span><span class=\"mtk1\">) </span><span class=\"mtk3\">// B</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      .</span><span class=\"mtk11\">then</span><span class=\"mtk1\">(</span><span class=\"mtk12\">response</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> </span><span class=\"mtk12\">response</span><span class=\"mtk1\">.</span><span class=\"mtk11\">json</span><span class=\"mtk1\">()) </span><span class=\"mtk3\">// C</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"># </span><span class=\"mtk12\">end</span><span class=\"mtk1\">-</span><span class=\"mtk12\">insert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      .</span><span class=\"mtk11\">then</span><span class=\"mtk1\">(</span><span class=\"mtk12\">result</span><span class=\"mtk1\"> </span><span class=\"mtk4\">=&gt;</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">dispatchStories</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">type:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;STORIES_FETCH_SUCCESS&#39;</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"># start-</span><span class=\"mtk12\">insert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">          </span><span class=\"mtk12\">payload:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">result</span><span class=\"mtk1\">.</span><span class=\"mtk12\">hits</span><span class=\"mtk1\">, </span><span class=\"mtk3\">// D</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\"># end-</span><span class=\"mtk12\">insert</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      .</span><span class=\"mtk11\">catch</span><span class=\"mtk1\">(() </span><span class=\"mtk4\">=&gt;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">dispatchStories</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">type:</span><span class=\"mtk1\"> </span><span class=\"mtk8\">&#39;STORIES_FETCH_FAILURE&#39;</span><span class=\"mtk1\"> })</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  }, []);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">  ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">};</span></span></span></code></pre>\n<p>Zunächst rufen wir mit <code class=\"language-text\">API_ENDPOINT</code> (A) beliebte Tech-Storys ab. Dafür verwenden wir die <a href=\"https://developer.mozilla.org/de/docs/Web/API/Fetch_API\">Fetch-API des nativen Browsers</a>. Weil es nahe liegt, wählen wir als Suchwort <code class=\"language-text\">React</code> (B). Die Daten werden über die API im Datenformat <a href=\"https://developer.mozilla.org/de/docs/Learn/JavaScript/Objects/JSON\">JSON</a> gesendet (C). Letztendlich senden wir das Ergebnis der Abfrage in der passenden Datenstruktur als <code class=\"language-text\">payload</code> an den Status (D).</p>\n<p>Im Codebeispiel verwenden wir mit <code class=\"language-text\">${API_ENDPOINT}react</code> einen <a href=\"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Template_literals\">Template-String</a>. Wäre diese Funktion in JavaScript nicht verfügbar, gäbe es eine Alternative: die klassische Konkatenation mit dem <code class=\"language-text\">+</code>-Operator:</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">const greeting = &#39;Hello&#39;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// + operator</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">const welcome = greeting + &#39; React&#39;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">console.log(welcome);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Hello React</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// template literals</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">const anotherWelcome = `${greeting} React`;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">console.log(anotherWelcome);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Hello React</span></span></code></pre>\n<p>Öffne die Anwendung im Browser, um die Änderungen zu begutachten. Da sich die Struktur der Daten nicht geändert hat, ist es weiterhin möglich, die Liste nach dem Abrufen mit der Suchfunktion zu filtern und Element zu entfernen. Wir werden diesen Zugriff auf die Drittanbieter-API in den nächsten Abschnitten wieder bearbeiten.</p>\n<h3 id=\"übungen\" style=\"position:relative;\"><a href=\"#%C3%BCbungen\" aria-label=\"übungen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Übungen:</h3>\n<ul>\n<li>Begutachte den <a href=\"https://codesandbox.io/s/github/the-road-to-learn-react/hacker-stories/tree/hs/Data-Fetching-with-React\">Quellcode dieses Abschnitts</a>.\n<ul>\n<li>Reflektiere die <a href=\"https://github.com/the-road-to-learn-react/hacker-stories/compare/hs/React-Impossible-States...hs/Data-Fetching-with-React?expand=1\">Änderungen gegenüber dem letzten Abschnitt</a>.</li>\n</ul>\n</li>\n<li>Informiere dich über <a href=\"https://news.ycombinator.com/\">Hacker News</a> und deren <a href=\"https://hn.algolia.com/api\">API</a>.</li>\n<li>Lese mehr über die <a href=\"https://developer.mozilla.org/de/docs/Web/API/Fetch_API\">Fetch API</a> zum Herstellen einer Verbindung zu Remote-APIs.</li>\n<li>Lese mehr zu <a href=\"https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Template_literals\">Template-Strings</a>.</li>\n</ul>\n<img src=\"https://vg02.met.vgwort.de/na/ea70b58c8e184d39ad24b0914f236cf4\" width=\"1\" height=\"1\" alt=\"\">\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .mtk3 { color: #6A9955; }\n  .default-dark .mtk1 { color: #D4D4D4; }\n  .default-dark .mtk12 { color: #9CDCFE; }\n  .default-dark .mtk4 { color: #569CD6; }\n  .default-dark .mtk8 { color: #CE9178; }\n  .default-dark .mtk11 { color: #DCDCAA; }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"Datenabruf mit React In der Beispielanwendung verwenden wir Pseudodaten, die aus einem selbsterstellten Promise-Objekt stammen. Die…","fields":{"slug":"/react-lernen-react-modern-datenabruf/"},"frontmatter":{"title":"Datenabruf mit React","date":"2021-08-03","tags":["JavaScript","React"],"syndication":null,"description":"desc","thumbnail":null}}},"pageContext":{"slug":"/react-lernen-react-modern-datenabruf/","previous":{"id":"581f604e-001e-51d6-8bf0-864b83fb6256","frontmatter":{"title":"Nochmaliges Abrufen von Daten in React","tags":["JavaScript","React"],"categories":["React"],"template":"post"},"fields":{"slug":"/react-lernen-react-modern-nochmaliges-abrufen-von-daten/"}},"next":{"id":"3fa430cc-dc6b-5b58-99d9-b5e26bf46c90","frontmatter":{"title":"Kontrollierte Komponenten in React","tags":["JavaScript","React"],"categories":["React"],"template":"post"},"fields":{"slug":"/react-lernen-react-modern-kontrollierte-komponenten/"}}}},
    "staticQueryHashes": ["352937542"]}