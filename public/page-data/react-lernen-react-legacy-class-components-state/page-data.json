{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/react-lernen-react-legacy-class-components-state/",
    "result": {"data":{"allWebmention":{"totalCount":0,"edges":[]},"markdownRemark":{"html":"<h2 id=\"legacy-react-klassenkomponenten-status\" style=\"position:relative;\"><a href=\"#legacy-react-klassenkomponenten-status\" aria-label=\"legacy react klassenkomponenten status permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Legacy-React Klassenkomponenten: Status</h2>\n<p>Vor der Einführung der React Hooks waren die Klassenkomponenten den Funktionskomponenten überlegen, da nur sie den Status verwalteten. Mit einem Klassenkonstruktor wird der Anfangszustand festgelegt. Außerdem gibt die Instanz der Komponente (<code class=\"language-text\">this</code>) jederzeit Zugriff auf den aktuellen Status (<code class=\"language-text\">this.state</code>) und die Statusaktualisierungsmethode der Komponente (<code class=\"language-text\">this.setState</code>):</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">class App extends React.Component {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  constructor(props) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    super(props);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    this.state = {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      searchTerm: &#39;React&#39;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    };</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  render() {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    const { searchTerm } = this.state;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      &lt;div&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        &lt;h1&gt;My Hacker Stories&lt;/h1&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        &lt;SearchForm</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          searchTerm={searchTerm}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          onSearchInput={() =&gt; this.setState({</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            searchTerm: event.target.value</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">          })}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        /&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      &lt;/div&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>Wenn der Status mehr als eine Eigenschaft in seinem Statusobjekt verwaltet, führt <code class=\"language-text\">setState</code> eine vereinfachte Aktualisierung durch. Nur die an <code class=\"language-text\">setState</code> übergebenen Eigenschaften werden aktualisiert. Alles andere bleibt, wie es ist. Für Frontend-Anwendungen ist die Statusverwaltung wichtig. Deshalb führte in der Vergangenheit ohne Hooks kein Weg an Klassenkomponenten vorbei.</p>\n<p>In einer Klassenkomponente gibt es zur Statusverwaltung zwei dedizierte APIs: <code class=\"language-text\">this.state</code> und <code class=\"language-text\">this.setState</code>. In einer Funktionskomponente übernehmen heute die Hooks <code class=\"language-text\">useState</code> und <code class=\"language-text\">useReducer</code> diese Aufgabe. Verwandte Elemente werden in einen Hook gepackt, während eine Klassenkomponente nichts anderes als eine allgemeine Status-API verwendet. Dies war einer der Hauptgründe, Hooks einzuführen und sich von Klassenkomponenten zu verabschieden.</p>\n<h3 id=\"übungen\" style=\"position:relative;\"><a href=\"#%C3%BCbungen\" aria-label=\"übungen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Übungen:</h3>\n<ul>\n<li>Erstelle eine statusbehaftete Klassenkomponente (beispielsweise ein Eingabefeld mit einem Label).</li>\n</ul>\n<img src=\"https://vg07.met.vgwort.de/na/d6bc8344d85642c795f658402a51daf8\" width=\"1\" height=\"1\" alt=\"\">\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"Legacy-React Klassenkomponenten: Status Vor der Einführung der React Hooks waren die Klassenkomponenten den Funktionskomponenten überlegen…","fields":{"slug":"/react-lernen-react-legacy-class-components-state/"},"frontmatter":{"title":"Legacy-React Klassenkomponenten: Status","date":"2021-08-03","tags":["JavaScript","React"],"syndication":null,"description":"desc","thumbnail":null}}},"pageContext":{"slug":"/react-lernen-react-legacy-class-components-state/","previous":{"id":"cbfb2381-188b-52bd-a676-e51685a5e9cb","frontmatter":{"title":"Asynchrone Daten in React","tags":["JavaScript","React"],"categories":["React"],"template":"post"},"fields":{"slug":"/react-lernen-react-modern-asynchrone-daten/"}},"next":{"id":"c8bf17aa-4493-5f6b-ab73-b378e15b1913","frontmatter":{"title":"Async/Await in React (fortgeschrittene Anleitung)","tags":["JavaScript","React"],"categories":["React"],"template":"post"},"fields":{"slug":"/react-lernen-react-modern-async-await/"}}}},
    "staticQueryHashes": ["352937542"]}