{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/react-lernen-react-maintenance-react-und-typescript/",
    "result": {"data":{"allWebmention":{"totalCount":0,"edges":[]},"markdownRemark":{"html":"<h2 id=\"typescript-und-react\" style=\"position:relative;\"><a href=\"#typescript-und-react\" aria-label=\"typescript und react permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TypeScript und React</h2>\n<p>TypeScript für JavaScript und React bietet dir viele Vorteile. Du entwickelst mit diesem Werkzeug robustere Anwendungen. Anstatt erst zur Laufzeit Typfehler in der Befehlszeile oder im Browser zu erhalten, wirst du mit TypeScript schon vorher von einer Entwicklungsumgebung auf diese hingewiesen. Nebenbei wird der Code lesbarer, da jede Variable mit einem Typ definiert ist. Das Verschieben von Codeblöcken oder das Überarbeiten des Programmcodes ist effizienter möglich. Statisch typisierte Sprachen wie TypeScript sind aufgrund dieser Vorteile gegenüber dynamischen, wie purem JavaScript, beliebt. Es ist sinnvoll, <a href=\"https://www.typescriptlang.org/index.html\">TypeScript</a> genauer anzusehen.</p>\n<p>Um TypeScript in React zu verwenden, installiere das Framework und seine Abhängigkeiten über die Befehlszeile. Wenn du auf Probleme stößt, befolge die offiziellen Installationsanweisungen auf der Website der <a href=\"https://create-react-app.dev/docs/adding-typescript/\"><em>Create React App</em></a>:</p>\n<p>{title=\"Command Line\",lang=\"text\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">npm install --save typescript @types/node @types/react</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">npm install --save typescript @types/react-dom @types/jest</span></span></code></pre>\n<p>Benenne anschließend alle JavaScript-Dateien (<em>.js</em>) in TypeScript-Dateien (<em>.tsx</em>) um.</p>\n<p>{title=\"Command Line\",lang=\"text\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">mv src/index.js src/index.tsx</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">mv src/App.js src/App.tsx</span></span></code></pre>\n<p>Nach dem Umbenennen ist ein Neustart des Entwicklungsservers notwendig: Jetzt treten Kompilierungsfehler im Browser und in der Entwicklungsumgebung (IDE) auf. Wenn Letzteres der Fall ist, installiere ein TypeScript-Plugin oder eine TypeScript-Erweiterung für deine IDE. An Ersterem arbeiten wir nachfolgend. Wir sorgen für eine <a href=\"https://de.wikipedia.org/wiki/Typsicherheit\">Typsicherheit</a> in der Datei <em>src/App.tsx</em>. Fangen wir mit <code class=\"language-text\">useSemiPersistentState</code> an:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">const useSemiPersistentState = (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  key: string,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  initialState: string</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  const [value, setValue] = React.useState(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    localStorage.getItem(key) || initialState</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  React.useEffect(() =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    localStorage.setItem(key, value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }, [value, key]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  return [value, setValue];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span></code></pre>\n<p>Nachfolgend stellen wir sicher, dass <code class=\"language-text\">useSemiPersistentState</code> zwei Argumente vom Typ String erwartet. Wir könnten der Funktion mitteilen, dass sie ein Array (<code class=\"language-text\">[]</code>) mit einem <code class=\"language-text\">string</code> (state) zurückgibt. Der <em>Statusaktualisierungsfunktion</em> teilen wir mit, dass sie ein <code class=\"language-text\">value</code> annimmt und nichts (<code class=\"language-text\">void</code>) erwidert:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">const useSemiPersistentState = (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  key: string,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  initialState: string</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">): [string, (newValue: string) =&gt; void] =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  const [value, setValue] = React.useState(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    localStorage.getItem(key) || initialState</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  React.useEffect(() =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    localStorage.setItem(key, value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }, [value, key]);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  return [value, setValue];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span></code></pre>\n<p>Aufgrund der vorherigen Verbesserungen ist es nicht notwendig, Typen in den Funktionskörpern hinzufügen. Das liegt daran, dass <a href=\"https://de.wikipedia.org/wiki/Typinferenz\"><strong>Typinferenz</strong></a> standardmäßig in React-Hooks funktioniert. Wenn der <em>Anfangszustand</em> eines <code class=\"language-text\">useState</code>-Hook ein JavaScript-String-Grundelement ist, wird der zurückgegebene <em>aktuelle Zustand</em> als String abgeleitet und die zurückgegebene <em>Statusaktualisierungsfunktion</em> nimmt nur einen String als Argument und gibt nichts zurück:</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">const [value, setValue] = React.useState(&#39;React&#39;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// Es wird davon ausgegangen, dass value eine Zeichenfolge ist</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">// setValue verwendet nur eine Zeichenfolge als Argument</span></span></code></pre>\n<p>Beim Umarbeiten/Refactoring einer React-Anwendung hin zu Typensicherheit, hast du die Wahl zwischen unterschiedlichen Vorgehensweisen. Ich arbeite als Erstes an den Eigenschaften (Props) und dem Status der Blattkomponenten im Komponentenbaum. Beispielsweise erhält die Item-Komponente ein Element (hier <code class=\"language-text\">item</code>) und eine Callback-Handler-Funktion (hier <code class=\"language-text\">onRemoveItem</code>). Füge die Inline-Typen für beide Funktionsargumente wie zuvor hinzu:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">const Item = ({</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  item,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onRemoveItem,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}: {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  item: {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    objectID: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    url: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    title: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    author: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    num_comments: number;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    points: number;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  };</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onRemoveItem: (item: {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    objectID: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    url: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    title: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    author: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    num_comments: number;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    points: number;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }) =&gt; void;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}) =&gt; (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;div&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;/div&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">);</span></span></code></pre>\n<p>Es gibt zwei Probleme: Der Code ist ausführlich und enthält Wiederholgungen. Wir beheben beide Mängel auf einen Schlag, indem wir einen eigenen <code class=\"language-text\">Story</code>-Typ außerhalb der Komponenten oben in der Datei <em>src/App.js</em> definieren:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">type Story = {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  objectID: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  url: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  title: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  author: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  num_comments: number;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  points: number;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">const Item = ({</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  item,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onRemoveItem,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}: {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  item: Story;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onRemoveItem: (item: Story) =&gt; void;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}) =&gt; (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;div&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;/div&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">);</span></span></code></pre>\n<p>Das <code class=\"language-text\">item</code> ist vom Typ <code class=\"language-text\">Story</code>; Die Funktion <code class=\"language-text\">onRemoveItem</code> verwendet ein <code class=\"language-text\">item</code> vom Typ <code class=\"language-text\">Story</code> als Argument und gibt nichts zurück. Bereinige als Nächstes den Code, indem du die Eigenschaften der Item-Komponente außerhalb definierst:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">type ItemProps = {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  item: Story;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onRemoveItem: (item: Story) =&gt; void;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">const Item = ({ item, onRemoveItem }: ItemProps) =&gt; (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;div&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;/div&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">);</span></span></code></pre>\n<p>Dies ist die beliebteste Methode, um Eigenschaften (Props) für TypeScript umzuarbeiten. Wechseln wir in die List-Komponente und wenden dies hier ebenfalls an:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">type Story = {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">type Stories = Array&lt;Story&gt;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">type ListProps = {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  list: Stories;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onRemoveItem: (item: Story) =&gt; void;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">const List = ({ list, onRemoveItem }: ListProps) =&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  list.map(item =&gt; (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    &lt;Item</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      key={item.objectID}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      item={item}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      onRemoveItem={onRemoveItem}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    /&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ));</span></span></code></pre>\n<p>Die Funktion <code class=\"language-text\">onRemoveItem</code> wird zweimal eingegeben, jeweils einmal für <code class=\"language-text\">ItemProps</code> und <code class=\"language-text\">ListProps</code>. Erledigen <em>könnten</em> wir dies mit einem eigenständigen TypScript-Typ <code class=\"language-text\">OnRemoveItem</code>. Diesen verwendeten wir an beiden Stellen. Beachte, dass die Entwicklung zunehmend komplexer wird, da Komponenten in verschiedene Dateien aufgeteilt werden. Deshalb behalten wir die doppelten Texte hier bei.</p>\n<p>Da wir die Typen <code class=\"language-text\">Story</code> und <code class=\"language-text\">stories</code> haben, verwenden wir sie für andere Komponenten. Füge den Typ <code class=\"language-text\">Story</code> zum Callback-Handler in der <code class=\"language-text\">App</code> hinzu:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">const App = () =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  const handleRemoveStory = (item: Story) =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    dispatchStories({</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      type: &#39;REMOVE_STORY&#39;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      payload: item,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    });</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  };</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span></code></pre>\n<p><code class=\"language-text\">storiesReducer</code> verwaltet den Typ <code class=\"language-text\">Story</code>, ohne die Typen <code class=\"language-text\">state</code> und <code class=\"language-text\">action</code> festzulegen. Als Entwickler der Anwendung kennen wir beide Objekte, inklusive ihre Eigenschaften und Typen. Deshalb vervollständigen wir dies:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">type StoriesState = {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  data: Stories;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  isLoading: boolean;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  isError: boolean;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">type StoriesAction = {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  type: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  payload: any;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">const storiesReducer = (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  state: StoriesState,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  action: StoriesAction</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span></code></pre>\n<p>Der Typ <code class=\"language-text\">Action</code> mit seinen Typdefinitionen <code class=\"language-text\">string</code> und <code class=\"language-text\">any</code> (TypeScript <strong>Wildcard</strong>) ist zu weit gefasst. Wir gewinnen dadurch keine echte Typensicherheit, weil Aktionen nicht unterscheidbar sind. Indem wir jeden TypeScript-Aktionstyp als <strong>Schnittstelle</strong> angeben und einen <strong>Vereinigungstyp</strong> (hier <code class=\"language-text\">StoriesAction</code>) für die endgültige Typensicherheit verwenden, verbessern wir dieses Manko:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">interface StoriesFetchInitAction {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  type: &#39;STORIES_FETCH_INIT&#39;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">interface StoriesFetchSuccessAction {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  type: &#39;STORIES_FETCH_SUCCESS&#39;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  payload: Stories;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">interface StoriesFetchFailureAction {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  type: &#39;STORIES_FETCH_FAILURE&#39;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">interface StoriesRemoveAction {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  type: &#39;REMOVE_STORY&#39;;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  payload: Story;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">type StoriesAction =</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  | StoriesFetchInitAction</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  | StoriesFetchSuccessAction</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  | StoriesFetchFailureAction</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  | StoriesRemoveAction;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">const storiesReducer = (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  state: StoriesState,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  action: StoriesAction</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span></code></pre>\n<p>Der Status der <code class=\"language-text\">stories</code>, der aktuelle Status und die Aktion sind Typen; Der zurückgegebene neue Status ist jetzt <a href=\"https://de.wikipedia.org/wiki/Typsicherheit\">typsicher</a>. Wenn du beispielsweise eine Aktion mit einem nicht definierten Aktionstyp an <code class=\"language-text\">useReducer</code> sendest, wird ein Typfehler angezeigt. Wenn du der Funktion <code class=\"language-text\">handleRemoveStory</code>, die ein <code class=\"language-text\">item</code> entfernt, etwas anderes als ein Objekt vom Typ <code class=\"language-text\">Story</code> übergibst, erhältst du ebenfalls einen Fehlerhinweis bezüglich des falschen Typs.</p>\n<p>In der <code class=\"language-text\">return</code>-Anweisung der App für die zurückgegebene List-Komponente gibt es weiterhin ein Typensicherheitsproblem.</p>\n<p>Laut einem <a href=\"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/57\">TypeScript mit React-Issue auf GitHub</a>: <em>\"Dies liegt daran, dass Funktionskomponenten aufgrund von Einschränkungen im Compiler nur einen JSX-Ausdruck oder null zurückgeben. Andernfalls wird eine kryptische Fehlermeldung angezeigt, die besagt, dass der Typ nicht zugewiesen werden kann.\"</em></p>\n<p>Wir beheben dies, indem wir der List-Komponente ein umgebendes <code class=\"language-text\">div</code>-Element oder ein React-Fragment zuweisen:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">const List = ({ list, onRemoveItem }: ListProps) =&gt; (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    {list.map(item =&gt; (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      &lt;Item</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        key={item.objectID}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        item={item}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        onRemoveItem={onRemoveItem}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      /&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    ))}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &lt;/&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">);</span></span></code></pre>\n<p>Konzentrieren wir uns auf die SearchForm-Komponente, welche Callback-Handler mit Ereignissen beinhaltet:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">type SearchFormProps = {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  searchTerm: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onSearchInput: (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onSearchSubmit: (event: React.FormEvent&lt;HTMLFormElement&gt;) =&gt; void;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">const SearchForm = ({</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  searchTerm,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onSearchInput,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onSearchSubmit,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}: SearchFormProps) =&gt; (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">);</span></span></code></pre>\n<p>Oft reicht es aus, <code class=\"language-text\">React.SyntheticEvent</code> anstelle von <code class=\"language-text\">React.ChangeEvent</code> oder <code class=\"language-text\">React.FormEvent</code>  zu verwenden. Die Eventhandler stellen eine Instanz von <a href=\"https://de.reactjs.org/docs/events.html\">SyntheticEvent</a> dar. Wechseln wir zur App-Komponente und wenden trotzdem <code class=\"language-text\">React.ChangeEvent</code> und <code class=\"language-text\">React.FormEvent</code> an:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">const App = () =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  const handleSearchInput = (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    event: React.ChangeEvent&lt;HTMLInputElement&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ) =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    setSearchTerm(event.target.value);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  };</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  const handleSearchSubmit = (</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    event: React.FormEvent&lt;HTMLFormElement&gt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ) =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    setUrl(`${API_ENDPOINT}${searchTerm}`);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    event.preventDefault();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  };</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span></code></pre>\n<p>Übrig bleibt die InputWithLabel-Komponente. Bevor wir uns mit deren Eigenschaften (Props) befassen, werfen wir einen Blick auf <code class=\"language-text\">ref</code>. Leider wird der Rückgabewert nicht festgelegt. Korrigieren wir dies:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">const InputWithLabel = ({ ... }) =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  const inputRef = React.useRef&lt;HTMLInputElement&gt;(null!);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  React.useEffect(() =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (isFocused &amp;&amp; inputRef.current) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      inputRef.current.focus();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  }, [isFocused]);</span></span></code></pre>\n<p>Wir haben den Typ für <code class=\"language-text\">ref</code> festgelegt. Außerdem haben wir den Typ vor dem Überschreiben geschützt. Wir greifen nur lesend auf ihn zu, in der Methode <code class=\"language-text\">focus</code>. Dort übernimmt React für uns die Arbeit und setzt das DOM-Element auf die Eigenschaft <code class=\"language-text\">current</code>.</p>\n<p>Zuletzt werden wir Typensicherheitsprüfungen für die Eigenschaften (Props) der InputWithLabel-Komponente anwenden. Beachte die <code class=\"language-text\">children</code>-Eigenschaft mit ihrem spezifischen Typ und den <strong>optionalen Typen</strong>, die mit einem Fragezeichen gekennzeichnet sind:</p>\n<p>{title=\"src/App.tsx\",lang=\"javascript\"}</p>\n<pre class=\"grvsc-container default-dark\" data-language=\"\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">type InputWithLabelProps = {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  id: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  value: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  type?: string;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onInputChange: (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  isFocused?: boolean;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  children: React.ReactNode;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">const InputWithLabel = ({</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  id,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  value,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  type = &#39;text&#39;,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  onInputChange,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  isFocused,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  children,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># start-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}: InputWithLabelProps) =&gt; {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"># end-insert</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ...</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">};</span></span></code></pre>\n<p>Die Eigenschaften <code class=\"language-text\">type</code> und <code class=\"language-text\">isFocused</code> sind optional. Mit TypeScript hast du die Möglichkeit, dem Compiler mitzuteilen, dass diese nicht an die Komponente übergeben werden. Die <code class=\"language-text\">childen</code>-Eigenschaft enthält viele TypeScript-Typdefinitionen, die auf dieses Konzept anwendbar sind. Die universellste davon ist<code class=\"language-text\"> React.ReactNode</code>.</p>\n<p>Unsere gesamte React-Anwendung wird von TypeScript geprüft, sodass Tippfehler bei der Kompilierung auffallen --- und nicht erst zur Laufzeit im Browser. Wenn du deine React-Anwendung mit TypeScript nutzt, ergänze als erstes bei allen Argumenten die Typdefinitionen. Hierzu bearbeitest du JavaScript-Funktionen, benutzerdefinierte React-Hooks oder React-Funktionskomponenten. Bei der Verwendung von React ist es wichtig, das du dich mit Typen für Formularelemente, Ereignisse und JSX auskennst.</p>\n<h3 id=\"übungen\" style=\"position:relative;\"><a href=\"#%C3%BCbungen\" aria-label=\"übungen permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Übungen:</h3>\n<ul>\n<li>Begutachte den <a href=\"https://codesandbox.io/s/github/the-road-to-learn-react/hacker-stories/tree/hs/TypeScript-in-React\">Quellcode dieses Abschnitts</a>.\n<ul>\n<li>Reflektiere die <a href=\"https://github.com/the-road-to-learn-react/hacker-stories/compare/hs/react-modern-final...hs/TypeScript-in-React?expand=1\">Änderungen gegenüber dem Stand der Anwendung am Ende des ersten Kapitels</a>.</li>\n</ul>\n</li>\n<li>Stöbere im <a href=\"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet#reacttypescript-cheatsheets\">React + TypeScript Cheatsheet</a>. Dort findest du viele Anwendungsfälle und deren Lösung. Es ist nicht nötig, alles auswendig zu wissen, wenn du weißt, wo es nachlesbar ist.</li>\n<li>Entscheide dich, ob du beim Weiterlesen TypeScript nutzt oder nicht. Lösche die hier vorgenommen Ergänzungen, wenn du dich dagegen entscheidest. Andernfalls füge beim Weiterarbeiten neue Typen hinzu, wenn du auf einen Kompilierungsfehler stößt.</li>\n</ul>\n<img src=\"https://vg07.met.vgwort.de/na/ad06c85b801b4c8ca792e75cc579c28a\" width=\"1\" height=\"1\" alt=\"\">\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","excerpt":"TypeScript und React TypeScript für JavaScript und React bietet dir viele Vorteile. Du entwickelst mit diesem Werkzeug robustere Anwendungen…","fields":{"slug":"/react-lernen-react-maintenance-react-und-typescript/"},"frontmatter":{"title":"TypeScript und React","date":"2021-08-03","tags":["JavaScript","React"],"syndication":null,"description":"desc","thumbnail":null}}},"pageContext":{"slug":"/react-lernen-react-maintenance-react-und-typescript/","previous":{"id":"c5ca5bd7-4394-5d79-831b-cef1aef48284","frontmatter":{"title":"React Status (fortgeschrittene Anleitung)","tags":["JavaScript","React"],"categories":["React"],"template":"post"},"fields":{"slug":"/react-lernen-react-modern-status/"}},"next":{"id":"9158b49d-6568-50ce-b6ca-d49a97a006a9","frontmatter":{"title":"Projektstruktur","tags":["JavaScript","React"],"categories":["React"],"template":"post"},"fields":{"slug":"/react-lernen-react-maintenance-projektstruktur/"}}}},
    "staticQueryHashes": ["352937542"]}