{"version":3,"sources":["webpack:///./src/components/Search.js","webpack:///./src/utils/helpers.js","webpack:///./src/pages/blog.en.js","webpack:///./src/components/Posts.js"],"names":["Search","posts","data","tags","getSimplifiedPosts","options","map","post","id","node","date","frontmatter","slug","fields","title","thumbnails","thumbnail","childImageSharp","fixed","slugify","string","match","x","toLowerCase","join","BlogIndex","allMarkdownRemark","edges","simplifiedPosts","useMemo","lang","config","siteTitle","className","Posts","to","key","tag"],"mappings":"2FAAA,uEAIe,SAASA,EAAT,GAA4B,IAAVC,EAAS,EAATA,MAC/B,OACE,oCACE,iCACE,kBAAC,IAAD,CAAOC,KAAMD,EAAOE,MAAI,Q,kCCRzB,SAASC,EAAmBH,EAAOI,GACxC,YADsD,IAAdA,MAAU,IAC3CJ,EAAMK,KAAI,SAACC,GAAD,sBACfC,GAAID,EAAKE,KAAKD,GACdE,KAAMH,EAAKE,KAAKE,YAAYD,KAC5BE,KAAML,EAAKE,KAAKI,OAAOD,KACvBT,KAAMI,EAAKE,KAAKE,YAAYR,KAC5BW,MAAOP,EAAKE,KAAKE,YAAYG,OACzBT,EAAQU,YAAc,CACxBC,UAAWT,EAAKE,KAAKE,YAAYK,UAAUC,gBAAgBC,WAK1D,SAASC,EAAQC,GACtB,OACEA,GACAA,EACGC,MACC,sEAEDf,KAAI,SAACgB,GAAD,OAAOA,EAAEC,iBACbC,KAAK,KArBZ,qE,kCCAA,gJAWe,SAASC,EAAT,GAA8B,IACrCxB,EADoC,EAARC,KACfwB,kBAAkBC,MAC/BC,EAAkBC,mBAAQ,kBAAMzB,YAAmBH,KAAQ,CAACA,IAElE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,0BAAM6B,KAAK,OACX,yCAAeC,IAAOC,YAExB,kBAAC,IAAD,MACA,iCACE,oCACA,uBAAGC,UAAU,YAAb,mEAGA,kBAAC,IAAD,CAAQhC,MAAO2B,Q,kCC3BvB,mFAKe,SAASM,EAAT,GAAgC,IAAfhC,EAAc,EAAdA,KAAMC,EAAQ,EAARA,KACpC,OACE,yBAAK8B,UAAW9B,EAAO,kBAAoB,cACxCD,EAAKI,KAAI,SAACG,GACT,OACE,kBAAC,OAAD,CAAM0B,GAAI1B,EAAKG,KAAMqB,UAAU,MAAMG,IAAK3B,EAAKD,IAC7C,yBAAKyB,UAAU,QACb,8BAAOxB,EAAKC,OAEd,yBAAKuB,UAAU,QAAQxB,EAAKK,OAC3BX,GACC,yBAAK8B,UAAU,aACZxB,EAAKN,MACJM,EAAKN,KAAKG,KAAI,SAAC+B,GAAD,OACZ,kBAAC,OAAD,CACED,IAAKC,EACLF,GAAE,SAAWhB,YAAQkB,GACrBJ,UAAS,OAASI,GAEjBA","file":"component---src-pages-blog-en-js-733f4727cb894e593cd6.js","sourcesContent":["import React from 'react'\n\nimport Posts from './Posts'\n\nexport default function Search({ posts }) {\n  return (\n    <>\n      <section>\n        <Posts data={posts} tags />\n      </section>\n    </>\n  )\n}\n","export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    title: post.node.frontmatter.title,\n    ...(options.thumbnails && {\n      thumbnail: post.node.frontmatter.thumbnail.childImageSharp.fixed,\n    }),\n  }))\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    string\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/Layout'\nimport Search from '../components/Search'\nimport SEO from '../components/SEO'\n\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function BlogIndex({ data }) {\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n\n  return (\n    <Layout>\n      <Helmet>\n        <html lang=\"en\" />\n        <title>Blog | {config.siteTitle}</title>\n      </Helmet>\n      <SEO />\n      <section>\n        <h1>Blog</h1>\n        <p className=\"subtitle\">\n          Articles, tutorials, snippets, reflections and everything else.\n        </p>\n        <Search posts={simplifiedPosts} />\n      </section>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogQueryEn {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { template: { eq: \"post\" } } }\n    ) {\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD.MM.YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { slugify } from '../utils/helpers'\n\nexport default function Posts({ data, tags }) {\n  return (\n    <div className={tags ? 'posts with-tags' : 'grid posts'}>\n      {data.map((node) => {\n        return (\n          <Link to={node.slug} className=\"row\" key={node.id}>\n            <div className=\"cell\">\n              <time>{node.date}</time>\n            </div>\n            <div className=\"cell\">{node.title}</div>\n            {tags && (\n              <div className=\"cell tags\">\n                {node.tags &&\n                  node.tags.map((tag) => (\n                    <Link\n                      key={tag}\n                      to={`/tags/${slugify(tag)}`}\n                      className={`tag-${tag}`}\n                    >\n                      {tag}\n                    </Link>\n                  ))}\n              </div>\n            )}\n          </Link>\n        )\n      })}\n    </div>\n  )\n}\n"],"sourceRoot":""}