{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/templates/tag.js","webpack:///./src/components/Posts.js"],"names":["getSimplifiedPosts","posts","options","map","post","id","node","date","frontmatter","slug","fields","tags","title","thumbnails","thumbnail","childImageSharp","fixed","slugify","string","match","x","toLowerCase","join","TagTemplate","data","tag","pageContext","totalCount","allMarkdownRemark","edges","simplifiedPosts","useMemo","message","config","siteTitle","class","className","pageQuery","Posts","to","key"],"mappings":"6LAAO,SAASA,EAAmBC,EAAOC,GACxC,YADsD,IAAdA,MAAU,IAC3CD,EAAME,KAAI,SAACC,GAAD,sBACfC,GAAID,EAAKE,KAAKD,GACdE,KAAMH,EAAKE,KAAKE,YAAYD,KAC5BE,KAAML,EAAKE,KAAKI,OAAOD,KACvBE,KAAMP,EAAKE,KAAKE,YAAYG,KAC5BC,MAAOR,EAAKE,KAAKE,YAAYI,OACzBV,EAAQW,YAAc,CACxBC,UAAWV,EAAKE,KAAKE,YAAYM,UAAUC,gBAAgBC,WAK1D,SAASC,EAAQC,GACtB,OACEA,GACAA,EACGC,MACC,sEAEDhB,KAAI,SAACiB,GAAD,OAAOA,EAAEC,iBACbC,KAAK,O,kCCrBZ,0LAWe,SAASC,EAAT,GAA6C,IAAtBC,EAAqB,EAArBA,KAC5BC,EADiD,EAAfC,YAClCD,IACAE,EAAeH,EAAKI,kBAApBD,WACF1B,EAAQuB,EAAKI,kBAAkBC,MAC/BC,EAAkBC,mBAAQ,kBAAM/B,YAAmBC,KAAQ,CAACA,IAC5D+B,EAAyB,IAAfL,EAAmB,eAAiB,gBAEpD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQf,MAAK,iBAAmBa,EAAnB,MAA4BQ,IAAOC,YAChD,kBAAC,IAAD,MACA,iCACE,oCACO,2BAAIT,IAEX,uBAAGU,MAAM,YACP,0BAAMC,UAAU,SAAST,GACxBK,IAGL,6BAASI,UAAU,UACjB,kBAAC,IAAD,CAAOZ,KAAMM,MAMd,IAAMO,EAAS,a,kCCtCtB,mFAKe,SAASC,EAAT,GAAgC,IAAfd,EAAc,EAAdA,KAAMb,EAAQ,EAARA,KACpC,OACE,yBAAKyB,UAAWzB,EAAO,uBAAyB,cAC7Ca,EAAKrB,KAAI,SAACG,GACT,OACE,kBAAC,OAAD,CAAMiC,GAAIjC,EAAKG,KAAM2B,UAAU,MAAMI,IAAKlC,EAAKD,IAC7C,yBAAK+B,UAAU,QACb,8BAAO9B,EAAKC,OAEd,yBAAK6B,UAAU,QAAQ9B,EAAKM,OAC3BD,GACC,yBAAKyB,UAAU,aACZ9B,EAAKK,MACJL,EAAKK,KAAKR,KAAI,SAACsB,GAAD,OACZ,kBAAC,OAAD,CACEe,IAAKf,EACLc,GAAE,SAAWtB,YAAQQ,GACrBW,UAAS,OAASX,GAEjBA","file":"component---src-templates-tag-js-abcb90425391d5ba13cd.js","sourcesContent":["export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    title: post.node.frontmatter.title,\n    ...(options.thumbnails && {\n      thumbnail: post.node.frontmatter.thumbnail.childImageSharp.fixed,\n    }),\n  }))\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    string\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport Layout from '../components/Layout'\nimport Posts from '../components/Posts'\nimport SEO from '../components/SEO'\n\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function TagTemplate({ data, pageContext }) {\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const message = totalCount === 1 ? ' post found.' : ' posts found.'\n\n  return (\n    <Layout>\n      <Helmet title={`Posts tagged: ${tag} | ${config.siteTitle}`} />\n      <SEO />\n      <section>\n        <h1>\n          Tag: <u>{tag}</u>\n        </h1>\n        <p class=\"subtitle\">\n          <span className=\"count\">{totalCount}</span>\n          {message}\n        </p>\n      </section>\n      <section className=\"medium\">\n        <Posts data={simplifiedPosts} />\n      </section>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(filter: { frontmatter: { tags: { in: [$tag] } } }) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"DD.MM.YYYY\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { slugify } from '../utils/helpers'\n\nexport default function Posts({ data, tags }) {\n  return (\n    <div className={tags ? 'grid posts with-tags' : 'grid posts'}>\n      {data.map((node) => {\n        return (\n          <Link to={node.slug} className=\"row\" key={node.id}>\n            <div className=\"cell\">\n              <time>{node.date}</time>\n            </div>\n            <div className=\"cell\">{node.title}</div>\n            {tags && (\n              <div className=\"cell tags\">\n                {node.tags &&\n                  node.tags.map((tag) => (\n                    <Link\n                      key={tag}\n                      to={`/tags/${slugify(tag)}`}\n                      className={`tag-${tag}`}\n                    >\n                      {tag}\n                    </Link>\n                  ))}\n              </div>\n            )}\n          </Link>\n        )\n      })}\n    </div>\n  )\n}\n"],"sourceRoot":""}