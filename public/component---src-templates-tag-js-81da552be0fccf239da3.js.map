{"version":3,"file":"component---src-templates-tag-js-81da552be0fccf239da3.js","mappings":"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","sources":["webpack://blog.astrid-guenther.de/./src/components/Post.js","webpack://blog.astrid-guenther.de/./src/components/Posts.js","webpack://blog.astrid-guenther.de/./src/templates/tag.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\nimport Img from 'gatsby-image'\n\nexport const Post = ({ node, query, prefix, hideDate, yearOnly }) => {\n  const date = new Date(node.date)\n  const oneMonthAgo = new Date()\n  oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1)\n  let isNew = false\n\n  if (date > oneMonthAgo) {\n    isNew = true\n  }\n\n  let formattedDate\n  let formattedYear\n  if (node.date) {\n    const dateArr = node.date.split(' ')\n    const year = dateArr.pop()\n\n    dateArr[0] = dateArr[0].slice(0, 3)\n    formattedDate = dateArr.join(' ').slice(0, -1)\n    formattedYear = year\n  }\n\n  const getTitle = (title, query) => {\n    if (query) {\n      const re = new RegExp(query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n      const highlightStart = title.search(re)\n\n      if (highlightStart !== -1) {\n        const highlightEnd = highlightStart + query.length\n\n        return (\n          <h3>\n            {title.slice(0, highlightStart)}\n            <strong className=\"highlighted\">\n              {title.slice(highlightStart, highlightEnd)}\n            </strong>\n            {title.slice(highlightEnd)}\n          </h3>\n        )\n      }\n      return <h3>{title}</h3>\n    }\n    return <h3>{title}</h3>\n  }\n\n  return (\n    <Link\n      to={prefix ? `/${prefix}${node.slug}` : node.slug}\n      key={node.id}\n      className={isNew ? 'post new' : 'post'}\n    >\n      <span className=\"flex\" style={{ alignItems: 'center' }}>\n        {node.thumbnail && (\n          <Img\n            fixed={node.thumbnail}\n            style={{ marginRight: '1rem', minWidth: '25px' }}\n          />\n        )}\n        {getTitle(node.title, query)}\n        <span className=\"new-badge\">{isNew && 'New!'}</span>\n      </span>\n      <span>\n        {formattedDate && !hideDate && (\n          <small>{yearOnly ? formattedYear : formattedDate}</small>\n        )}\n      </span>\n    </Link>\n  )\n}\n","import React, { useMemo } from 'react'\n\nimport { Post } from './Post'\n\nexport const Posts = ({\n  data = [],\n  showYears,\n  query,\n  prefix,\n  hideDate,\n  yearOnly,\n}) => {\n  const postsByYear = useMemo(() => {\n    const collection = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section key={year}>\n        <h2>{year}</h2>\n        <div className=\"posts\">\n          {postsByYear[year].map((node) => (\n            <Post key={node.id} node={node} query={query} prefix={prefix} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className=\"posts\">\n        {data.map((node) => (\n          <Post\n            key={node.id}\n            node={node}\n            query={query}\n            prefix={prefix}\n            hideDate={hideDate}\n            yearOnly={yearOnly}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport { Layout } from '../components/Layout'\nimport { SEO } from '../components/SEO'\nimport { Posts } from '../components/Posts'\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function TagTemplate({ data, pageContext }) {\n  const { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const message = totalCount === 1 ? ' post found.' : ' posts found.'\n\n  return (\n    <>\n      <Helmet title={`Posts tagged: ${tag} | ${config.siteTitle}`} />\n      <SEO />\n\n      <article>\n        <header>\n          <div className=\"container\">\n            <h1>\n              <span>Posts tagged:</span>{' '}\n              <span className=\"primary-underline\">{tag}</span>\n            </h1>\n            <p className=\"description\">\n              <span className=\"count bright\">{totalCount}</span>\n              {message}\n            </p>\n          </div>\n        </header>\n\n        <section className=\"container\">\n          <Posts data={simplifiedPosts} />\n        </section>\n      </article>\n    </>\n  )\n}\n\nTagTemplate.Layout = Layout\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["Post","node","query","prefix","hideDate","yearOnly","date","Date","oneMonthAgo","setMonth","getMonth","formattedDate","formattedYear","isNew","dateArr","split","year","pop","slice","join","to","slug","key","id","className","style","alignItems","thumbnail","fixed","marginRight","minWidth","title","re","RegExp","replace","highlightStart","search","highlightEnd","length","getTitle","Posts","data","showYears","postsByYear","useMemo","collection","forEach","post","years","Object","keys","reverse","map","TagTemplate","tag","pageContext","totalCount","allMarkdownRemark","posts","edges","simplifiedPosts","getSimplifiedPosts","message","config","Layout"],"sourceRoot":""}