---
date: 2019-08-01
title: 'ECMAScript 6 - Arbeiten mit Strings'
template: post
thumbnail: '../thumbnails/js.png'
slug: arbeiten-mit-strings
categories:
  - JavaScript
tags:
  - ecmascript
  - javascript
---

# ECMAScript 6 - Arbeiten mit Strings
[](#){#ArbeitenMitStrings}


## In diesem Kapitel werden wir ‚Ä¶
Zun√§chst zeige ich Ihnen, wie Sie 
Todo Meldungen immer mit Firefox




## Verbesserte Unicode-Unterst√ºtzung

### UTF-16

ECMAScript 5 entstand, als 16 Bit ausreichten, um alle vorhandene Unicode-Zeichen 
abzubilden. Sp√§ter wurde Unicode um weitere Zeichen mit einem erweitert. 
Dies hat zur Folge, 
dass 16 Bit nicht mehr ausreichen, um alle m√∂glichen Unicode-Zeichen darzustellen.

> Das Ziel von Unicode ist es, alle in Gebrauch befindlichen Schriftsysteme 
und Zeichen zu kodieren. Der Zeichenumfang ist dazu 
in 17 Ebenen (englisch planes) gegliedert. 
Sechs dieser Ebenen werden bereits verwendet, die restlichen sind f√ºr sp√§tere Nutzung reserviert. 
Die urspr√ºnglichen 16 Bit sind unter dem Namen *Basic Multilingual Plane* 
(BMP; deutsch Mehrsprachige Basis-Ebene, auch als Plane 0 bezeichnet) bekannt.

Damit die urspr√ºnglichen 16 Bit auch weiterhin problemlos 
verwendet werden k√∂nne, speichert UTF-16 die urspr√ºnglichen Unicode-Zeichen in der BMP 
weiterhin in 16 Bit. 
Alle neuen Unicode-Zeichen werden hingegen in 32 Bit 
gespeichert, also in zwei 16-Bit-Werten. 
Diese beiden 16-Bit-Werte werden als *Ersatzpaar* (englisch surrogate pair) bezeichnet. 
Streng genommen wird ein Unicode-Zeichen au√üerhalb der BMP in einer 
*UTF-16-Codeeinheit* anstelle eines *Unicode-Zeichens* gespeichert.

So k√∂nnen Sie alle Methoden die auf 16 Bit begrenzt sind weiterhin 
nutzen. Zumindest solange die Zeichen der BMP ausreichen - das hei√üt solange 
Sie keine der neuen Unicode-Zeichen verwenden.

Wenn Sie eine vollst√§ndige Unicode-Unterst√ºtzung ben√∂tigen, kann die Verwendung 
der alten Methoden zu versteckten Fehlern f√ºhren.

> Ein sehr popul√§res Beispiel f√ºr Unicode-Zeichen, die nicht im BMP 
enthalten sind sind Emojis: Das einfache lachende Gesicht üòÄ 
[U + 1F600](https://unicode-table.com/de/#1F600)
kann nicht in einem einzelnen Zeichen dargestellt werden.

Was ich genau mit versteckten Fehler meine, verdeutlicht der nachfolgende 
Programmcode. Als Beispiel habe ich das Leerzeichen und das Emoji mit dem 
lachenden Gesicht gegen√ºbergestellt. 
Die Unicode-Nummer des Emoji mit dem 
lachenden Gesicht ist `U+1F600` und der HTML-Code dazu 
ist `&#128512;`. 
Die Unicode-Nummer das Ausrufezeichen ist `U+0021` und der HTML-Code dazu 
ist `&#33;`.

``` 
let text = "üòÄ";
console.log(text.length); // Ausgabe: 2
console.log(/^.$/.test(text)); // Ausgabe: false
console.log(text.charAt(0)); // Ausgabe: ÔøΩ
console.log(text.charAt(1)); // Ausgabe: ÔøΩ
console.log(text.charCodeAt(0)); // Ausgabe: 55357
console.log(text.charCodeAt(1)); // Ausgabe: 56832

text = "!";
console.log(text.length); // Ausgabe: 1
console.log(/^.$/.test(text)); // Ausgabe: true
console.log(text.charAt(0)); // Ausgabe: "!"
console.log(text.charAt(1)); // Ausgabe: ""
console.log(text.charCodeAt(0)); // Ausgabe: 33
console.log(text.charCodeAt(1)); // Ausgabe: NaN
<!--index_980.html -->
```

Es wird kein Fehler angezeigt, aber anders als erwartet  
- gibt `text.length` f√ºr das lachende Gesicht den Wert 2 anstelle von 1 zur√ºck.
- wird das lachende Gesicht beim der Pr√ºfung eines Regul√§ren Ausdrucks nicht 
als ein Zeichen erkannt.
- es der `charAt()`-Methode nicht m√∂glich ein Zeichen zur√ºckzugeben.
- gibt die `charCodeAt()`-Methode f√ºr jedes der beiden Zeichen in der UTF-16-Codeeinheit 
das Unicode-Zeichen f√ºr die BMP aus. 

Falls Sie mit Unicode-Zeichen oberhalb der BMP arbeiten sind die Methoden 
`charAt()` und `charCodeAt()` nicht die richtige Wahl f√ºr Sie. Diese arbeiten 
ausschlie√ülich im BMP-Bereich korrekt. Und noch schlimmer: Bei Unicode-Zeichen 
au√üerhalb der BMP melden diese keinen Fehler.  

Mit ECMAScript 6 sind 
Methoden hinzugekommen, die den neuen Bereich korrekt unterst√ºtzen. 

> Die Unicode-Nummer ist ein hexadezimaler Wert. Der HTML-Code ist die 
ins Dezimalsystem umgerechnete Unicode-Nummer.
M√∂chten Sie das Umrechnen von einem Zahlenformat in ein anderes Zahlenformat 
gerne selbst 
nachvollziehen. Falls Sie hierzu Hilfe ben√∂tigen ist die Website  
https://www.arndt-bruenner.de/mathe/scripts/Zahlensysteme.htm vielleicht das 
Richtige f√ºr Sie.

### codePointAt()

Eine Methode, eine vollst√§ndige Unicode-Unterst√ºtzung bietet ist `codePointAt()`

``` 
let text = "üòÄ";
console.log(text.codePointAt(0)); // Ausgabe: 128512
console.log(text.codePointAt(1)); // Ausgabe: 56832

text = "!";
console.log(text.codePointAt(0)); // Ausgabe: 33
console.log(text.codePointAt(1)); // Ausgabe: undefined
<!--index_979.html -->
```

Noch einmal zur Wiederholung: Die Unicode-Nummer des Emoji mit dem 
lachenden Gesicht ist `U+1F600` und der HTML-Code dazu 
ist `&#128512;`. 
Die Unicode-Nummer das Ausrufezeichen ist `U+0021` und der HTML-Code dazu 
ist `&#33;`. `codePointAt(0)` gibt nun also in beiden F√§llen denn korrekten Wert 
zur√ºck.

> Bei der verwendung der `codePointAt()`-Method ist allerdings noch wichtig 
darauf zu achten, das auch hier die UTF-16-Codeeinheit z√ºrckgegeben wird - also 
zwei Unicode-Zeichen. Sehen sich zur verdeutlichung nachfolgenden Programmcode an.

```
let text = "üòÄ!";
console.log(text.codePointAt(0)); // Ausgabe: 128512
console.log(text.codePointAt(1)); // Ausgabe: 56832
console.log(text.codePointAt(2)); // Ausgabe: 33
console.log(text.codePointAt(1)); // Ausgabe: undefined
<!--index_979a.html -->
```

> Wenn Sie herausfinden m√∂chten, ob Sie es mit einem Unicode-Zeichen oder einer 
UTF-16-Codeeinheit zu tun haben, k√∂nnen Sie die Methode `codePointAt(0)` zu Hilfe 
nehmen. Eine M√∂glichkeit zeigt Ihnen das n√§chste Codebeispiel.
```
console.log(is32Bit("üòÖ")); // Ausgabe: true
console.log(is32Bit("!"));  // Ausgabe: false
function is32Bit(c){
    return c.codePointAt(0) > 0xFFFF;
}
<!--index_978.html -->
```

### String.fromCodePoint()

Im vorhergehenden Kapitel haben wir HTML-Code eines Zeichens ermittelt. In 
diesem Kapitel machen wir das Gegenteil. Bisher war f√ºr die Errechnung eines 
Zeichens aus einem HTML-Code die Methode 
`fromCharCode()` das Mittel der Wahl. Genau wie `charCodeAt()` deckt `fromCharCode()` 
au√üschlie√ülich den BMP-Bereich korrekt ab. Analog zu `codePointAt()` 
f√ºr `charCodeAt()` gibt es die fromCodePoint()-Methode als Pentant zu 
`fromCharCode()`. `fromCodePoint()` bietet das gleiche Ergebnis 
wie `fromCharCode()` bei einer vollst√§ndige Unicode-Unterst√ºtzung.



| BMP-Bereich   | vollst√§ndige Unicode-Unterst√ºtzung |
| ------------- | ------------- |
| fromCharCode()| fromCodePoint() |
| charCodeAt()| codePointAt() |

### normalize()

Ein interessanter Aspekt beim Vergleichen oder beim Sortieren von Strings sind 
die unterschiedlichen M√∂glichkeiten, mit denen das gleiche Zeichen dargestellt 
werden kann. 
Beispielsweise kann der Buchstabe `√Ñ` als einzelnes Unicode-Zeichen 
`U + 00E4 LATIN SMALL LETIN A MIT DIAERESIS` oder als zwei Unicode-Zeichen 
`U + 0061 LATIN SMALL LETIN A` and `U + 0308 COMBINING DIAERESIS` dargestellt werden. 
Meistens wird die erste Form verwendet. 
Wenn sie zwei Strings vergleiche, die den Buchstaben `√Ñ` auf unterschiedliche Art 
speichern, dann kann dies beim Sortieren oder beim Vergleichen unerwarteten Ergebnissen 
f√ºhren.

> Es gibt vier Normalformen: 
- die kanonische Dekomposition (NFD), 
- die kanonische Dekomposition gefolgt von einer kanonischen Komposition (NFC), 
- die kompatible Dekomposition (NFKD) und 
- die kompatible Dekomposition gefolgt von einer kanonischen Komposition (NFKC).  

In JavaScript ist ein String standardm√§√üig in der Normalform NFC.

> Eine genaue Erkl√§rung dieser Formen f√ºhrt 
hier zu weit. Einen guten Einstieg zum Thema bietet Ihnen Wikpedia: 
https://de.wikipedia.org/w/index.php?title=Normalisierung_(Unicode)&oldid=178027174 . 
Was Sie sich auf jeden Fall merken sollten: Beim Vergleichen - beziehungsweise beim 
Sortieren - m√ºssen beide zu vergleichenden Strings in der gleichen Normalform vorliegen. 
Andernfalls kann es Probleme geben.

Wie erreichen Sie, dass ein String in eine bestimmte Normalform √ºberf√ºhrt wird? 
Seit ECMAScript 6 k√∂nnen Sie hierf√ºr die Methode `normalize()` verwenden. Im n√§chsten 
Beispiel sehen Sie beispielhaft, wie Sie die Methode `normalize()` praktisch einsetzen 
k√∂nnen. 

``` 
let eins = "√Ñpfel";
let zwei = "√Ñpfel";

let einsNFD = eins.normalize("NFD");
let zweiNFD = zwei.normalize("NFD");

let einsNFC = eins.normalize("NFC");
let zweiNFC = zwei.normalize("NFC");

console.log(eins===zwei); //true
console.log(eins===einsNFD); //false
console.log(eins===einsNFC); //true

console.log(eins===zweiNFD); //false
console.log(eins===zweiNFC); //true
<!--index_977.html -->
```

Das Programmcodebeispiel spricht f√ºr sich. Falls der String `√Ñpfel` in unterschiedlichen  
Normalformen vorliegt, schl√§gt eine Pr√ºfung auf Gleichheit fehl.

Falls Sie bisher noch nie auf ein Problem mit unterschiedlichen Unicode Normalformen 
gesto√üen sind, dann ist es nicht wahrscheinlich, dass Sie diese Methode ben√∂tigen. Es 
schade jedoch nie diese Methode f√ºr den Fall der F√§lle im Hinterkopf zu behalten.

### u-Flag

#### Das u-Flag in Aktion

Im Beispiel 980.html hatte ich gezeigt, dass eine Pr√ºfung eines regul√§ren Ausdrucks 
auf die L√§nge ein unerwartetes Ergebnis bringt, wenn das Zeichen im regul√§ren Ausdruck 
sich nicht im BMP Bereich befindet. 
Ein Unicode-Zeichen au√üerhalb der BMP wird wie schon beschrieben in einer 
*UTF-16-Codeeinheit* anstelle eines *Unicode-Zeichens* gespeichert. 

ECMAScript 6 schafft hier mit dem u-Flag abhilfe. Wenn dieses Flag gesetzt ist, 
wird der regul√§re Ausdruck nicht anhand von *UTF-16-Codeeinheit* interpretiert

``` 
let text = "üòÄ";
console.log(text.length); // Ausgabe: 2
console.log(/^.$/.test(text)); // Ausgabe: false
console.log(/^.$/u.test(text)); // Ausgabe: false

text = "!";
console.log(text.length); // Ausgabe: 1
console.log(/^.$/.test(text)); // Ausgabe: true
console.log(/^.$/u.test(text)); // Ausgabe: false
<!--index_976.html -->
```

#### Codepoints z√§hlen

``` 
function codePointLengthWithU(text){
    let sum = text.match(/[\s\S]/gu);
    return sum ? sum.length : 0;
} 
function codePointLengthWithoutU(text){
    let sum = text.match(/[\s\S]/g);
    return sum ? sum.length : 0;
} 
let text = "üòÄ";
console.log(text.length); // Ausgabe: 2
console.log(codePointLengthWithU(text)); // Ausgabe: 1
console.log(codePointLengthWithoutU(text)); // Ausgabe: 2

text = "!";
console.log(text.length); // Ausgabe: 1
console.log(codePointLengthWithU(text)); // Ausgabe: 1
console.log(codePointLengthWithoutU(text)); // Ausgabe: 1
<!--index_975.html -->
```

#### Browserunterst√ºztung des u-Flags

``` 
function hasUFlag(){
    try {
        let pattern = new RegExp(".", "u");
        return true;
    } catch (ex) {
        return false;
    }
} 
console.log(hasUFlag()); // Ausgabe true wenn das u-Flag vom Browser unterst√ºzt wird
<!--index_974.html -->
```

## Andere Verbesserungen im Zusammenhang mit Zeichenketten

Das Suchen von Zeichenketten innerhalb von Zeichenketten war bisher recht 
aufwendig. 

### Identifizieren

#### Zeichenketten in Zeichenketten

Um eine Zeichenkette innerhalb einer Zeichenkette zu finden, war bisher der Weg 
√ºber die `indexOf()`-Methode das Mittel der Wahl. Mit ECMAScript 6 gibt es nun 
zus√§tzlich die Methoden 
- `startsWith()`
- `endsWith()`
- `includes()`

```
let meinString = "ECMAScript 6 mit Beispielen lernen";

console.log(meinString.startsWith("E")); // Ausgabe true
console.log(meinString.endsWith("n")); // Ausgabe true
console.log(meinString.includes("i")); // Ausgabe true

console.log(meinString.startsWith("i")); // Ausgabe false
console.log(meinString.endsWith("lernen")); // Ausgabe true
console.log(meinString.includes("√§")); // Ausgabe false

console.log(meinString.startsWith("i", 7)); // Ausgabe true
console.log(meinString.endsWith("r", 7)); // Ausgabe true
console.log(meinString.includes("i", 22)); // Ausgabe true
console.log(meinString.includes("i", 23)); // Ausgabe false
<!--index_973.html -->
```


### repeat()

```
let meinString = "ECMAScript6;";
console.log(meinString.repeat(1)); // Ausgabe: ECMAScript6;
console.log(meinString.repeat(2)); // Ausgabe: ECMAScript6;ECMAScript6;
console.log(meinString.repeat(3)); // Ausgabe: ECMAScript6;ECMAScript6;ECMAScript6;
<!--index_972.html -->
```


## Andere Verbesserungen bei der Arbeite mit regul√§ren Ausdr√ºcken

Regul√§re Ausdr√ºcke spielen in JavaScript eine gro√üe Rolle. 
### y-Flag

```

<!--index_971.html -->
```

https://stackoverflow.com/questions/4542304/what-does-regex-flag-y-do

### Duplizieren


> Das g-Flag steht f√ºr die globale Suche. Globale Suche bedeutet, dass alle 
√úberenstimmungen gefunden werden - abh√§ngig von der Gro√ü- oder Kleinschreibung. 
Das i-Flag sucht √úberenstimmungen unabh√§ngig von der Gro√ü- oder Kleinschreibung.


```
let rexWithi = /ab/i;
let rexWithg = new RegExp(rexWithi, "g");

console.log(rexWithi.toString()); // Ausgabe: /ab/i
console.log(rexWithg.toString()); // Ausgabe: /ab/g

console.log(rexWithi.test("ab")); // Ausgabe: true
console.log(rexWithg.test("ab")); // Ausgabe: true

console.log(rexWithi.test("AB")); // Ausgabe: true
console.log(rexWithg.test("AB")); // Ausgabe: false
<!--index_970.html -->
```

### Flag-Eigenschaften

```
let rex = /ab/iu;
console.log(rex.toString()); // Ausgabe: /ab/i

// ECMAScript 5
console.log(
        rex.toString().substring(
        rex.toString().lastIndexOf("/") + 1, rex.length
        )); // Ausgabe: iu

// ECMAScript 6
console.log(rex.source); // Ausgabe: ab
console.log(rex.flags); // Ausgabe: iu
<!--index_969.html -->
```
 
## Template-Strings

https://de.wikipedia.org/wiki/Dom%C3%A4nenspezifische_Sprache

### Syntax

Template-Strings sind anstelle von doppelten bzw. einfachen 
Anf√ºhrungszeichen in Back-Ticks (` `) (grave accent) eingeschlossen. 
Template-Strings k√∂nnen Platzhalter beinhalten, die durch 
das Dollarsymbol gefolgt von geschweiften Klammern gekennzeichnet 
sind (${expression}).
https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/template_strings

```

<!--index_968.html -->
```

### Multiline

Vor ECMAScript 6 war es nur auf Umwegen m√∂glich eine Zeichenkette auf 
mehrere Zeilen zu verteilen.

```

<!--index_967.html -->
```

```

<!--index_966.html -->
```

### Ersetzungen

```

<!--index_965.html -->
```

### Tagged

```

<!--index_964.html -->
```




> **Achtung:**


## In diesem Kapitel haben wir ...

xxx

[^1]: https://de.wikipedia.org/w/index.php?title=Interpreter&oldid=182588640 (https://bit.ly/2GT9nQS)
